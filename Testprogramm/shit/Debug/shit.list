
shit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b80  08002b80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b80  08002b80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b80  08002b80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002b94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002b94  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064cf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013e7  00000000  00000000  00026503  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d8  00000000  00000000  000278f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  00027fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014793  00000000  00000000  000285e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006327  00000000  00000000  0003cd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000834f2  00000000  00000000  000430a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001708  00000000  00000000  000c6610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002b28 	.word	0x08002b28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002b28 	.word	0x08002b28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 f9f1 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f821 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f903 	bl	8000434 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022e:	f000 f87d 	bl	800032c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int value1=GPIO_PIN_SET;
 8000232:	2301      	movs	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
  int value2=GPIO_PIN_RESET;
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
  uint16_t raw=0;
 800023a:	1dbb      	adds	r3, r7, #6
 800023c:	2200      	movs	r2, #0
 800023e:	801a      	strh	r2, [r3, #0]
  while (1)
  {
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
	  //HAL_Delay(500);
	  //int value=HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)
	  HAL_ADC_Start(&hadc1);
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <main+0x4c>)
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fe28 	bl	8000e98 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000248:	2301      	movs	r3, #1
 800024a:	425a      	negs	r2, r3
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <main+0x4c>)
 800024e:	0011      	movs	r1, r2
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fe6f 	bl	8000f34 <HAL_ADC_PollForConversion>
	  raw=HAL_ADC_GetValue(&hadc1);
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <main+0x4c>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fef9 	bl	8001050 <HAL_ADC_GetValue>
 800025e:	0002      	movs	r2, r0
 8000260:	1dbb      	adds	r3, r7, #6
 8000262:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8000264:	e7ec      	b.n	8000240 <main+0x24>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000028 	.word	0x20000028

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b09d      	sub	sp, #116	; 0x74
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2438      	movs	r4, #56	; 0x38
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2338      	movs	r3, #56	; 0x38
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 fc4b 	bl	8002b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	2328      	movs	r3, #40	; 0x28
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2310      	movs	r3, #16
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fc43 	bl	8002b18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	2328      	movs	r3, #40	; 0x28
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f002 fc3c 	bl	8002b18 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 fdaf 	bl	8001e08 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2202      	movs	r2, #2
 80002ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2240      	movs	r2, #64	; 0x40
 80002c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fddb 	bl	8001e88 <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f8d9 	bl	800048c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	2128      	movs	r1, #40	; 0x28
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2100      	movs	r1, #0
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 f8e5 	bl	80024c8 <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000302:	f000 f8c3 	bl	800048c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000306:	003b      	movs	r3, r7
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	01d2      	lsls	r2, r2, #7
 800030c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	003b      	movs	r3, r7
 8000316:	0018      	movs	r0, r3
 8000318:	f002 fa60 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000320:	f000 f8b4 	bl	800048c <Error_Handler>
  }
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b01d      	add	sp, #116	; 0x74
 800032a:	bd90      	pop	{r4, r7, pc}

0800032c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000332:	2310      	movs	r3, #16
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	2318      	movs	r3, #24
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f002 fbeb 	bl	8002b18 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	0018      	movs	r0, r3
 8000346:	230c      	movs	r3, #12
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fbe4 	bl	8002b18 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000350:	4b35      	ldr	r3, [pc, #212]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000352:	4a36      	ldr	r2, [pc, #216]	; (800042c <MX_ADC1_Init+0x100>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000356:	4b34      	ldr	r3, [pc, #208]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	05d2      	lsls	r2, r2, #23
 800035c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800035e:	4b32      	ldr	r3, [pc, #200]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036a:	4b2f      	ldr	r3, [pc, #188]	; (8000428 <MX_ADC1_Init+0xfc>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000370:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000372:	2204      	movs	r2, #4
 8000374:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000376:	4b2c      	ldr	r3, [pc, #176]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000378:	2200      	movs	r2, #0
 800037a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <MX_ADC1_Init+0xfc>)
 800037e:	2200      	movs	r2, #0
 8000380:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000382:	4b29      	ldr	r3, [pc, #164]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000384:	2200      	movs	r2, #0
 8000386:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <MX_ADC1_Init+0xfc>)
 800038a:	2201      	movs	r2, #1
 800038c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b26      	ldr	r3, [pc, #152]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000390:	2220      	movs	r2, #32
 8000392:	2100      	movs	r1, #0
 8000394:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_ADC1_Init+0xfc>)
 8000398:	2200      	movs	r2, #0
 800039a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039c:	4b22      	ldr	r3, [pc, #136]	; (8000428 <MX_ADC1_Init+0xfc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003a4:	222c      	movs	r2, #44	; 0x2c
 80003a6:	2100      	movs	r1, #0
 80003a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003b0:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003be:	223c      	movs	r2, #60	; 0x3c
 80003c0:	2100      	movs	r1, #0
 80003c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fb8d 	bl	8000aec <HAL_ADC_Init>
 80003d2:	1e03      	subs	r3, r0, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80003d6:	f000 f859 	bl	800048c <Error_Handler>
  }
  /** Configure Analog WatchDog 2 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80003da:	2110      	movs	r1, #16
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	22c0      	movs	r2, #192	; 0xc0
 80003e0:	0412      	lsls	r2, r2, #16
 80003e2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80003e4:	187a      	adds	r2, r7, r1
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_ADC1_Init+0xfc>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 f810 	bl	8001410 <HAL_ADC_AnalogWDGConfig>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80003f4:	f000 f84a 	bl	800048c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <MX_ADC1_Init+0x104>)
 80003fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	1d3a      	adds	r2, r7, #4
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_ADC1_Init+0xfc>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fe29 	bl	8001068 <HAL_ADC_ConfigChannel>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800041a:	f000 f837 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b00a      	add	sp, #40	; 0x28
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	20000028 	.word	0x20000028
 800042c:	40012400 	.word	0x40012400
 8000430:	08000004 	.word	0x08000004

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	0018      	movs	r0, r3
 800043e:	2314      	movs	r3, #20
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f002 fb68 	bl	8002b18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_GPIO_Init+0x54>)
 800044a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_GPIO_Init+0x54>)
 800044e:	2101      	movs	r1, #1
 8000450:	430a      	orrs	r2, r1
 8000452:	635a      	str	r2, [r3, #52]	; 0x34
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_GPIO_Init+0x54>)
 8000456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000458:	2201      	movs	r2, #1
 800045a:	4013      	ands	r3, r2
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2204      	movs	r2, #4
 8000464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2203      	movs	r2, #3
 800046a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	1d3a      	adds	r2, r7, #4
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fb60 	bl	8001b40 <HAL_GPIO_Init>

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b006      	add	sp, #24
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x44>)
 80004a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_MspInit+0x44>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	430a      	orrs	r2, r1
 80004a8:	641a      	str	r2, [r3, #64]	; 0x40
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x44>)
 80004ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ae:	2201      	movs	r2, #1
 80004b0:	4013      	ands	r3, r2
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_MspInit+0x44>)
 80004b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_MspInit+0x44>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0549      	lsls	r1, r1, #21
 80004c0:	430a      	orrs	r2, r1
 80004c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_MspInit+0x44>)
 80004c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	055b      	lsls	r3, r3, #21
 80004cc:	4013      	ands	r3, r2
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	2314      	movs	r3, #20
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 fb10 	bl	8002b18 <memset>
  if(hadc->Instance==ADC1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a18      	ldr	r2, [pc, #96]	; (8000560 <HAL_ADC_MspInit+0x80>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d12a      	bne.n	8000558 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_ADC_MspInit+0x84>)
 8000504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_ADC_MspInit+0x84>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0349      	lsls	r1, r1, #13
 800050c:	430a      	orrs	r2, r1
 800050e:	641a      	str	r2, [r3, #64]	; 0x40
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_ADC_MspInit+0x84>)
 8000512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	035b      	lsls	r3, r3, #13
 8000518:	4013      	ands	r3, r2
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_ADC_MspInit+0x84>)
 8000520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <HAL_ADC_MspInit+0x84>)
 8000524:	2101      	movs	r1, #1
 8000526:	430a      	orrs	r2, r1
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_ADC_MspInit+0x84>)
 800052c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052e:	2201      	movs	r2, #1
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000536:	2114      	movs	r1, #20
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2204      	movs	r2, #4
 800053c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2203      	movs	r2, #3
 8000542:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	187a      	adds	r2, r7, r1
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f001 faf4 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b00a      	add	sp, #40	; 0x28
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40012400 	.word	0x40012400
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f8a4 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <SystemInit+0x14>)
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0512      	lsls	r2, r2, #20
 80005a6:	609a      	str	r2, [r3, #8]
#endif
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <LoopForever+0xa>)
  ldr r3, =_edata
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <LoopForever+0xe>)
  adds r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
  ldr r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopForever+0x12>)
  b LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  str  r3, [r2]
 80005d4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d6:	3204      	adds	r2, #4

080005d8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <LoopForever+0x16>)
  cmp r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005de:	f7ff ffdd 	bl	800059c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005e2:	f002 fa75 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e6:	f7ff fe19 	bl	800021c <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   r0, =_estack
 80005ec:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 80005f0:	08002b88 	.word	0x08002b88
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000600:	20000090 	.word	0x20000090

08000604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_IRQHandler>
	...

08000608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x3c>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_Init+0x3c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f810 	bl	8000648 <HAL_InitTick>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d003      	beq.n	8000634 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e001      	b.n	8000638 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f7ff ff30 	bl	8000498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b002      	add	sp, #8
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <HAL_InitTick+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d02b      	beq.n	80006b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_InitTick+0x8c>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0x88>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	0019      	movs	r1, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	0098      	lsls	r0, r3, #2
 800066e:	f7ff fd49 	bl	8000104 <__udivsi3>
 8000672:	0003      	movs	r3, r0
 8000674:	0019      	movs	r1, r3
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff fd44 	bl	8000104 <__udivsi3>
 800067c:	0003      	movs	r3, r0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fa51 	bl	8001b26 <HAL_SYSTICK_Config>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d112      	bne.n	80006ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d80a      	bhi.n	80006a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fa30 	bl	8001afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_InitTick+0x90>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	e00d      	b.n	80006c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	e008      	b.n	80006c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e003      	b.n	80006c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b8:	230f      	movs	r3, #15
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006c0:	230f      	movs	r3, #15
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
}
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b005      	add	sp, #20
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <HAL_IncTick+0x18>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	18d2      	adds	r2, r2, r3
 80006ea:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_IncTick+0x18>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	20000008 	.word	0x20000008

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	2000008c 	.word	0x2000008c

08000710 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000720:	401a      	ands	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	fe3fffff 	.word	0xfe3fffff

08000738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	23e0      	movs	r3, #224	; 0xe0
 8000746:	045b      	lsls	r3, r3, #17
 8000748:	4013      	ands	r3, r2
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	2104      	movs	r1, #4
 8000766:	400a      	ands	r2, r1
 8000768:	2107      	movs	r1, #7
 800076a:	4091      	lsls	r1, r2
 800076c:	000a      	movs	r2, r1
 800076e:	43d2      	mvns	r2, r2
 8000770:	401a      	ands	r2, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2104      	movs	r1, #4
 8000776:	400b      	ands	r3, r1
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4099      	lsls	r1, r3
 800077c:	000b      	movs	r3, r1
 800077e:	431a      	orrs	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b004      	add	sp, #16
 800078a:	bd80      	pop	{r7, pc}

0800078c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	68da      	ldr	r2, [r3, #12]
 8000798:	23c0      	movs	r3, #192	; 0xc0
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4013      	ands	r3, r2
 800079e:	d101      	bne.n	80007a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007a0:	2301      	movs	r3, #1
 80007a2:	e000      	b.n	80007a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	0018      	movs	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}

080007ae <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	211f      	movs	r1, #31
 80007c2:	400a      	ands	r2, r1
 80007c4:	210f      	movs	r1, #15
 80007c6:	4091      	lsls	r1, r2
 80007c8:	000a      	movs	r2, r1
 80007ca:	43d2      	mvns	r2, r2
 80007cc:	401a      	ands	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	0e9b      	lsrs	r3, r3, #26
 80007d2:	210f      	movs	r1, #15
 80007d4:	4019      	ands	r1, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	201f      	movs	r0, #31
 80007da:	4003      	ands	r3, r0
 80007dc:	4099      	lsls	r1, r3
 80007de:	000b      	movs	r3, r1
 80007e0:	431a      	orrs	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}

080007ee <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	035b      	lsls	r3, r3, #13
 8000800:	0b5b      	lsrs	r3, r3, #13
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	0352      	lsls	r2, r2, #13
 8000822:	0b52      	lsrs	r2, r2, #13
 8000824:	43d2      	mvns	r2, r2
 8000826:	401a      	ands	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}

08000834 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	0212      	lsls	r2, r2, #8
 8000848:	43d2      	mvns	r2, r2
 800084a:	401a      	ands	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	400b      	ands	r3, r1
 8000854:	4904      	ldr	r1, [pc, #16]	; (8000868 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000856:	400b      	ands	r3, r1
 8000858:	431a      	orrs	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	07ffff00 	.word	0x07ffff00

0800086c <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg;
  
  if(AWDy == LL_ADC_AWD1)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <LL_ADC_SetAnalogWDMonitChannels+0x50>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d103      	bne.n	8000888 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	330c      	adds	r3, #12
 8000884:	001c      	movs	r4, r3
 8000886:	e009      	b.n	800089c <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	33a0      	adds	r3, #160	; 0xa0
 800088c:	0019      	movs	r1, r3
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	0d5b      	lsrs	r3, r3, #21
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	2204      	movs	r2, #4
 8000896:	4013      	ands	r3, r2
 8000898:	18cb      	adds	r3, r1, r3
 800089a:	001c      	movs	r4, r3
  }
  
  MODIFY_REG(*preg,
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80008a2:	400a      	ands	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68b9      	ldr	r1, [r7, #8]
 80008ac:	400b      	ands	r3, r1
 80008ae:	4313      	orrs	r3, r2
 80008b0:	6023      	str	r3, [r4, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b005      	add	sp, #20
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	7cc00000 	.word	0x7cc00000
 80008c0:	7cc7ffff 	.word	0x7cc7ffff

080008c4 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS)) + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL)));
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3320      	adds	r3, #32
 80008d6:	0018      	movs	r0, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	0d1b      	lsrs	r3, r3, #20
 80008dc:	2203      	movs	r2, #3
 80008de:	401a      	ands	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	0d5b      	lsrs	r3, r3, #21
 80008e4:	2101      	movs	r1, #1
 80008e6:	400b      	ands	r3, r1
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	18c3      	adds	r3, r0, r3
 80008ee:	001c      	movs	r4, r3
  
  MODIFY_REG(*preg,
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <LL_ADC_ConfigAnalogWDThresholds+0x48>)
 80008f4:	401a      	ands	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	0419      	lsls	r1, r3, #16
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	430b      	orrs	r3, r1
 80008fe:	4313      	orrs	r3, r2
 8000900:	6023      	str	r3, [r4, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b005      	add	sp, #20
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	f000f000 	.word	0xf000f000

08000910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <LL_ADC_EnableInternalRegulator+0x24>)
 800091e:	4013      	ands	r3, r2
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	0552      	lsls	r2, r2, #21
 8000924:	431a      	orrs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	6fffffe8 	.word	0x6fffffe8

08000938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	055b      	lsls	r3, r3, #21
 8000948:	401a      	ands	r2, r3
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	055b      	lsls	r3, r3, #21
 800094e:	429a      	cmp	r2, r3
 8000950:	d101      	bne.n	8000956 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000956:	2300      	movs	r3, #0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <LL_ADC_Enable+0x20>)
 800096e:	4013      	ands	r3, r2
 8000970:	2201      	movs	r2, #1
 8000972:	431a      	orrs	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	7fffffe8 	.word	0x7fffffe8

08000984 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	4013      	ands	r3, r2
 8000994:	2b01      	cmp	r3, #1
 8000996:	d101      	bne.n	800099c <LL_ADC_IsEnabled+0x18>
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <LL_ADC_IsEnabled+0x1a>
 800099c:	2300      	movs	r3, #0
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <LL_ADC_REG_StartConversion+0x20>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	2204      	movs	r2, #4
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	7fffffe8 	.word	0x7fffffe8

080009cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	2204      	movs	r2, #4
 80009da:	4013      	ands	r3, r2
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d101      	bne.n	80009e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}

080009ee <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	605a      	str	r2, [r3, #4]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	0052      	lsls	r2, r2, #1
 8000a60:	431a      	orrs	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	605a      	str	r2, [r3, #4]
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	605a      	str	r2, [r3, #4]
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	4393      	bics	r3, r2
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <LL_ADC_DisableIT_AWD2+0x1c>)
 8000aba:	401a      	ands	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	605a      	str	r2, [r3, #4]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	fffffeff 	.word	0xfffffeff

08000acc <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <LL_ADC_DisableIT_AWD3+0x1c>)
 8000ada:	401a      	ands	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	605a      	str	r2, [r3, #4]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	fffffdff 	.word	0xfffffdff

08000aec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af4:	231f      	movs	r3, #31
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e1aa      	b.n	8000e68 <HAL_ADC_Init+0x37c>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10a      	bne.n	8000b30 <HAL_ADC_Init+0x44>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fcdf 	bl	80004e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2254      	movs	r2, #84	; 0x54
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5499      	strb	r1, [r3, r2]
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff feff 	bl	8000938 <LL_ADC_IsInternalRegulatorEnabled>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d114      	bne.n	8000b68 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff fee4 	bl	8000910 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b48:	4bc9      	ldr	r3, [pc, #804]	; (8000e70 <HAL_ADC_Init+0x384>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	49c9      	ldr	r1, [pc, #804]	; (8000e74 <HAL_ADC_Init+0x388>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff fad8 	bl	8000104 <__udivsi3>
 8000b54:	0003      	movs	r3, r0
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000b5a:	e002      	b.n	8000b62 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f9      	bne.n	8000b5c <HAL_ADC_Init+0x70>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fee3 	bl	8000938 <LL_ADC_IsInternalRegulatorEnabled>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d10f      	bne.n	8000b96 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b86:	2201      	movs	r2, #1
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 8000b8e:	231f      	movs	r3, #31
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff16 	bl	80009cc <LL_ADC_REG_IsConversionOngoing>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	60fb      	str	r3, [r7, #12]
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba8:	2210      	movs	r2, #16
 8000baa:	4013      	ands	r3, r2
 8000bac:	d000      	beq.n	8000bb0 <HAL_ADC_Init+0xc4>
 8000bae:	e14e      	b.n	8000e4e <HAL_ADC_Init+0x362>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d000      	beq.n	8000bb8 <HAL_ADC_Init+0xcc>
 8000bb6:	e14a      	b.n	8000e4e <HAL_ADC_Init+0x362>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbc:	4aae      	ldr	r2, [pc, #696]	; (8000e78 <HAL_ADC_Init+0x38c>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff fed9 	bl	8000984 <LL_ADC_IsEnabled>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d137      	bne.n	8000c46 <HAL_ADC_Init+0x15a>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2218      	movs	r2, #24
 8000bde:	4393      	bics	r3, r2
 8000be0:	0019      	movs	r1, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler.                                                */
      MODIFY_REG(hadc->Instance->CFGR2                       ,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	0899      	lsrs	r1, r3, #2
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	0f9b      	lsrs	r3, r3, #30
 8000bfe:	079a      	lsls	r2, r3, #30
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_CKMODE                            ,
                 hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE );
      
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	061b      	lsls	r3, r3, #24
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d018      	beq.n	8000c46 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d012      	beq.n	8000c46 <HAL_ADC_Init+0x15a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	061b      	lsls	r3, r3, #24
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d00c      	beq.n	8000c46 <HAL_ADC_Init+0x15a>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8000c2c:	4b93      	ldr	r3, [pc, #588]	; (8000e7c <HAL_ADC_Init+0x390>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a93      	ldr	r2, [pc, #588]	; (8000e80 <HAL_ADC_Init+0x394>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	0019      	movs	r1, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	23f0      	movs	r3, #240	; 0xf0
 8000c3c:	039b      	lsls	r3, r3, #14
 8000c3e:	401a      	ands	r2, r3
 8000c40:	4b8e      	ldr	r3, [pc, #568]	; (8000e7c <HAL_ADC_Init+0x390>)
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7e1b      	ldrb	r3, [r3, #24]
 8000c4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7e5b      	ldrb	r3, [r3, #25]
 8000c50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7e9b      	ldrb	r3, [r3, #26]
 8000c58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <HAL_ADC_Init+0x17e>
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	015b      	lsls	r3, r3, #5
 8000c68:	e000      	b.n	8000c6c <HAL_ADC_Init+0x180>
 8000c6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c72:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da04      	bge.n	8000c86 <HAL_ADC_Init+0x19a>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	e001      	b.n	8000c8a <HAL_ADC_Init+0x19e>
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                             |
 8000c8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	212c      	movs	r1, #44	; 0x2c
 8000c90:	5c5b      	ldrb	r3, [r3, r1]
 8000c92:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                       |
 8000c94:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
    
    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	5c9b      	ldrb	r3, [r3, r2]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d115      	bne.n	8000cd2 <HAL_ADC_Init+0x1e6>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7e9b      	ldrb	r3, [r3, #26]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <HAL_ADC_Init+0x1ce>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0252      	lsls	r2, r2, #9
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	e00b      	b.n	8000cd2 <HAL_ADC_Init+0x1e6>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cca:	2201      	movs	r2, #1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <HAL_ADC_Init+0x204>
    {
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cde:	23e0      	movs	r3, #224	; 0xe0
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge );
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
    /*  - oversampling enable                                                 */
    /*  - oversampling ratio                                                  */
    /*  - oversampling shift                                                  */
    /*  - oversampling discontinuous mode (triggered mode)                    */
    /*  - trigger frequency mode                                              */
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                  hadc->Init.Oversampling.RightBitShift |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000cf8:	431a      	orrs	r2, r3
                  hadc->Init.Oversampling.TriggeredMode |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                  hadc->Init.Oversampling.RightBitShift |
 8000cfe:	431a      	orrs	r2, r3
                  hadc->Init.TriggerFrequencyMode
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                  hadc->Init.Oversampling.TriggeredMode |
 8000d04:	4313      	orrs	r3, r2
    tmpCFGR2 |= ( hadc->Init.Oversampling.Ratio         |
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	617b      	str	r3, [r7, #20]
                  );
    
    if (hadc->Init.OversamplingMode == ENABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	223c      	movs	r2, #60	; 0x3c
 8000d10:	5c9b      	ldrb	r3, [r3, r2]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d103      	bne.n	8000d1e <HAL_ADC_Init+0x232>
    {
      SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	4a57      	ldr	r2, [pc, #348]	; (8000e84 <HAL_ADC_Init+0x398>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	0019      	movs	r1, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	430a      	orrs	r2, r1
 8000d32:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG     ,
               tmpCFGR1              );
    
    MODIFY_REG(hadc->Instance->CFGR2,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	4a53      	ldr	r2, [pc, #332]	; (8000e88 <HAL_ADC_Init+0x39c>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	0019      	movs	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS       ,
               tmpCFGR2              );
    
    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f7ff fcfc 	bl	8000752 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d62:	494a      	ldr	r1, [pc, #296]	; (8000e8c <HAL_ADC_Init+0x3a0>)
 8000d64:	001a      	movs	r2, r3
 8000d66:	f7ff fcf4 	bl	8000752 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d109      	bne.n	8000d86 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4249      	negs	r1, r1
 8000d80:	430a      	orrs	r2, r1
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
 8000d84:	e03c      	b.n	8000e00 <HAL_ADC_Init+0x314>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	039b      	lsls	r3, r3, #14
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d136      	bne.n	8000e00 <HAL_ADC_Init+0x314>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;
      
      /* Parse all ranks from 1 to 8 */
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	e00c      	b.n	8000db2 <HAL_ADC_Init+0x2c6>
      {
        /* Check each sequencer rank until value of end of sequence */
        if(((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) == ADC_CHSELR_SQ1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	40da      	lsrs	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	220f      	movs	r2, #15
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d006      	beq.n	8000dba <HAL_ADC_Init+0x2ce>
      for(ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	3301      	adds	r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	2b07      	cmp	r3, #7
 8000db6:	d9ef      	bls.n	8000d98 <HAL_ADC_Init+0x2ac>
 8000db8:	e000      	b.n	8000dbc <HAL_ADC_Init+0x2d0>
        {
          break;
 8000dba:	46c0      	nop			; (mov r8, r8)
        }
      }
      
      if(ADCGroupRegularSequencerRanksCount == 1UL)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d109      	bne.n	8000dd6 <HAL_ADC_Init+0x2ea>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4249      	negs	r1, r1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8000dd4:	e014      	b.n	8000e00 <HAL_ADC_Init+0x314>
        /*          therefore afer the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a2b      	ldr	r2, [pc, #172]	; (8000e90 <HAL_ADC_Init+0x3a4>)
 8000de2:	4694      	mov	ip, r2
 8000de4:	4463      	add	r3, ip
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	221c      	movs	r2, #28
 8000dea:	4013      	ands	r3, r2
 8000dec:	2210      	movs	r2, #16
 8000dee:	4252      	negs	r2, r2
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <HAL_ADC_Init+0x3a8>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d10b      	bne.n	8000e28 <HAL_ADC_Init+0x33c>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4393      	bics	r3, r2
 8000e1e:	2201      	movs	r2, #1
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000e26:	e01c      	b.n	8000e62 <HAL_ADC_Init+0x376>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	2212      	movs	r2, #18
 8000e2e:	4393      	bics	r3, r2
 8000e30:	2210      	movs	r2, #16
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	65da      	str	r2, [r3, #92]	; 0x5c
      
      tmp_hal_status = HAL_ERROR;
 8000e44:	231f      	movs	r3, #31
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000e4c:	e009      	b.n	8000e62 <HAL_ADC_Init+0x376>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	2210      	movs	r2, #16
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 8000e5a:	231f      	movs	r3, #31
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e62:	231f      	movs	r3, #31
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	781b      	ldrb	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b008      	add	sp, #32
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	00030d40 	.word	0x00030d40
 8000e78:	fffffefd 	.word	0xfffffefd
 8000e7c:	40012708 	.word	0x40012708
 8000e80:	ffc3ffff 	.word	0xffc3ffff
 8000e84:	fffe0219 	.word	0xfffe0219
 8000e88:	dffffc02 	.word	0xdffffc02
 8000e8c:	07ffff04 	.word	0x07ffff04
 8000e90:	3fffffff 	.word	0x3fffffff
 8000e94:	833fffe7 	.word	0x833fffe7

08000e98 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fd91 	bl	80009cc <LL_ADC_REG_IsConversionOngoing>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d135      	bne.n	8000f1a <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2254      	movs	r2, #84	; 0x54
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_ADC_Start+0x24>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e035      	b.n	8000f28 <HAL_ADC_Start+0x90>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2254      	movs	r2, #84	; 0x54
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ec4:	250f      	movs	r5, #15
 8000ec6:	197c      	adds	r4, r7, r5
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 fd28 	bl	8001920 <ADC_Enable>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	7023      	strb	r3, [r4, #0]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed4:	197b      	adds	r3, r7, r5
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d119      	bne.n	8000f10 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_ADC_Start+0x98>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0052      	lsls	r2, r2, #1
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      
      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	221c      	movs	r2, #28
 8000efa:	601a      	str	r2, [r3, #0]
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2254      	movs	r2, #84	; 0x54
 8000f00:	2100      	movs	r1, #0
 8000f02:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fd4d 	bl	80009a8 <LL_ADC_REG_StartConversion>
 8000f0e:	e008      	b.n	8000f22 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2254      	movs	r2, #84	; 0x54
 8000f14:	2100      	movs	r1, #0
 8000f16:	5499      	strb	r1, [r3, r2]
 8000f18:	e003      	b.n	8000f22 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f22:	230f      	movs	r3, #15
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	781b      	ldrb	r3, [r3, #0]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	fffff0fe 	.word	0xfffff0fe

08000f34 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d102      	bne.n	8000f4c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f46:	2308      	movs	r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00f      	b.n	8000f6c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	d007      	beq.n	8000f68 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e06c      	b.n	8001042 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f68:	2304      	movs	r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f6c:	f7ff fbc6 	bl	80006fc <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f74:	e019      	b.n	8000faa <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	d016      	beq.n	8000faa <HAL_ADC_PollForConversion+0x76>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f7c:	f7ff fbbe 	bl	80006fc <HAL_GetTick>
 8000f80:	0002      	movs	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d302      	bcc.n	8000f92 <HAL_ADC_PollForConversion+0x5e>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10b      	bne.n	8000faa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	2204      	movs	r2, #4
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2254      	movs	r2, #84	; 0x54
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e04b      	b.n	8001042 <HAL_ADC_PollForConversion+0x10e>
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d0df      	beq.n	8000f76 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fbdf 	bl	800078c <LL_ADC_REG_IsTriggerSourceSWStart>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d02e      	beq.n	8001030 <HAL_ADC_PollForConversion+0xfc>
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7e9b      	ldrb	r3, [r3, #26]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d12a      	bne.n	8001030 <HAL_ADC_PollForConversion+0xfc>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d123      	bne.n	8001030 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff fced 	bl	80009cc <LL_ADC_REG_IsConversionOngoing>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d110      	bne.n	8001018 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	210c      	movs	r1, #12
 8001002:	438a      	bics	r2, r1
 8001004:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_ADC_PollForConversion+0x118>)
 800100c:	4013      	ands	r3, r2
 800100e:	2201      	movs	r2, #1
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	659a      	str	r2, [r3, #88]	; 0x58
 8001016:	e00b      	b.n	8001030 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	2220      	movs	r2, #32
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001028:	2201      	movs	r2, #1
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	65da      	str	r2, [r3, #92]	; 0x5c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7e1b      	ldrb	r3, [r3, #24]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	220c      	movs	r2, #12
 800103e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	fffffefe 	.word	0xfffffefe

08001050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001072:	2317      	movs	r3, #23
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2254      	movs	r2, #84	; 0x54
 8001082:	5c9b      	ldrb	r3, [r3, r2]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_ADC_ConfigChannel+0x24>
 8001088:	2302      	movs	r3, #2
 800108a:	e1bc      	b.n	8001406 <HAL_ADC_ConfigChannel+0x39e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2254      	movs	r2, #84	; 0x54
 8001090:	2101      	movs	r1, #1
 8001092:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fc97 	bl	80009cc <LL_ADC_REG_IsConversionOngoing>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d000      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0x3c>
 80010a2:	e19f      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x37c>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d100      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x46>
 80010ac:	e13e      	b.n	800132c <HAL_ADC_ConfigChannel+0x2c4>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d004      	beq.n	80010c4 <HAL_ADC_ConfigChannel+0x5c>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80010be:	4abf      	ldr	r2, [pc, #764]	; (80013bc <HAL_ADC_ConfigChannel+0x354>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d108      	bne.n	80010d6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0019      	movs	r1, r3
 80010ce:	0010      	movs	r0, r2
 80010d0:	f7ff fb8d 	bl	80007ee <LL_ADC_REG_SetSequencerChAdd>
 80010d4:	e0c9      	b.n	800126a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	211f      	movs	r1, #31
 80010e0:	400b      	ands	r3, r1
 80010e2:	210f      	movs	r1, #15
 80010e4:	4099      	lsls	r1, r3
 80010e6:	000b      	movs	r3, r1
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4013      	ands	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	035b      	lsls	r3, r3, #13
 80010f4:	0b5b      	lsrs	r3, r3, #13
 80010f6:	d105      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x9c>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0e9b      	lsrs	r3, r3, #26
 80010fe:	221f      	movs	r2, #31
 8001100:	4013      	ands	r3, r2
 8001102:	e098      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	d000      	beq.n	8001110 <HAL_ADC_ConfigChannel+0xa8>
 800110e:	e091      	b.n	8001234 <HAL_ADC_ConfigChannel+0x1cc>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d000      	beq.n	800111c <HAL_ADC_ConfigChannel+0xb4>
 800111a:	e089      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1c8>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2204      	movs	r2, #4
 8001122:	4013      	ands	r3, r2
 8001124:	d000      	beq.n	8001128 <HAL_ADC_ConfigChannel+0xc0>
 8001126:	e081      	b.n	800122c <HAL_ADC_ConfigChannel+0x1c4>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2208      	movs	r2, #8
 800112e:	4013      	ands	r3, r2
 8001130:	d000      	beq.n	8001134 <HAL_ADC_ConfigChannel+0xcc>
 8001132:	e079      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1c0>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2210      	movs	r2, #16
 800113a:	4013      	ands	r3, r2
 800113c:	d000      	beq.n	8001140 <HAL_ADC_ConfigChannel+0xd8>
 800113e:	e071      	b.n	8001224 <HAL_ADC_ConfigChannel+0x1bc>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2220      	movs	r2, #32
 8001146:	4013      	ands	r3, r2
 8001148:	d000      	beq.n	800114c <HAL_ADC_ConfigChannel+0xe4>
 800114a:	e069      	b.n	8001220 <HAL_ADC_ConfigChannel+0x1b8>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2240      	movs	r2, #64	; 0x40
 8001152:	4013      	ands	r3, r2
 8001154:	d000      	beq.n	8001158 <HAL_ADC_ConfigChannel+0xf0>
 8001156:	e061      	b.n	800121c <HAL_ADC_ConfigChannel+0x1b4>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	4013      	ands	r3, r2
 8001160:	d000      	beq.n	8001164 <HAL_ADC_ConfigChannel+0xfc>
 8001162:	e059      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1b0>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4013      	ands	r3, r2
 800116e:	d151      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1ac>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d149      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1a8>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4013      	ands	r3, r2
 8001186:	d141      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1a4>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4013      	ands	r3, r2
 8001192:	d139      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x1a0>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	4013      	ands	r3, r2
 800119e:	d131      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x19c>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	019b      	lsls	r3, r3, #6
 80011a8:	4013      	ands	r3, r2
 80011aa:	d129      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x198>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	01db      	lsls	r3, r3, #7
 80011b4:	4013      	ands	r3, r2
 80011b6:	d121      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x194>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	4013      	ands	r3, r2
 80011c2:	d119      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x190>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	4013      	ands	r3, r2
 80011ce:	d111      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x18c>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	d109      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x188>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	02db      	lsls	r3, r3, #11
 80011e4:	4013      	ands	r3, r2
 80011e6:	d001      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x184>
 80011e8:	2312      	movs	r3, #18
 80011ea:	e024      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e022      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 80011f0:	2311      	movs	r3, #17
 80011f2:	e020      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 80011f4:	2310      	movs	r3, #16
 80011f6:	e01e      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 80011f8:	230f      	movs	r3, #15
 80011fa:	e01c      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 80011fc:	230e      	movs	r3, #14
 80011fe:	e01a      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001200:	230d      	movs	r3, #13
 8001202:	e018      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001204:	230c      	movs	r3, #12
 8001206:	e016      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001208:	230b      	movs	r3, #11
 800120a:	e014      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 800120c:	230a      	movs	r3, #10
 800120e:	e012      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001210:	2309      	movs	r3, #9
 8001212:	e010      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001214:	2308      	movs	r3, #8
 8001216:	e00e      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001218:	2307      	movs	r3, #7
 800121a:	e00c      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 800121c:	2306      	movs	r3, #6
 800121e:	e00a      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001220:	2305      	movs	r3, #5
 8001222:	e008      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001224:	2304      	movs	r3, #4
 8001226:	e006      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001228:	2303      	movs	r3, #3
 800122a:	e004      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1ce>
 8001234:	2300      	movs	r3, #0
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	6852      	ldr	r2, [r2, #4]
 800123a:	201f      	movs	r0, #31
 800123c:	4002      	ands	r2, r0
 800123e:	4093      	lsls	r3, r2
 8001240:	000a      	movs	r2, r1
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	661a      	str	r2, [r3, #96]	; 0x60
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	429a      	cmp	r2, r3
 8001256:	d808      	bhi.n	800126a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	001a      	movs	r2, r3
 8001266:	f7ff faa2 	bl	80007ae <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	001a      	movs	r2, r3
 8001278:	f7ff fadc 	bl	8000834 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db00      	blt.n	8001286 <HAL_ADC_ConfigChannel+0x21e>
 8001284:	e0b8      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001286:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 8001288:	0018      	movs	r0, r3
 800128a:	f7ff fa55 	bl	8000738 <LL_ADC_GetCommonPathInternalCh>
 800128e:	0003      	movs	r3, r0
 8001290:	613b      	str	r3, [r7, #16]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_ADC_ConfigChannel+0x35c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d11d      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x270>
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	4013      	ands	r3, r2
 80012a4:	d118      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x270>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	4313      	orrs	r3, r2
 80012ae:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f7ff fa2c 	bl	8000710 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_ADC_ConfigChannel+0x360>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4943      	ldr	r1, [pc, #268]	; (80013cc <HAL_ADC_ConfigChannel+0x364>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f7fe ff20 	bl	8000104 <__udivsi3>
 80012c4:	0003      	movs	r3, r0
 80012c6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80012c8:	e002      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x268>
          {
            wait_loop_index--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0UL)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x262>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012d6:	e08f      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a3c      	ldr	r2, [pc, #240]	; (80013d0 <HAL_ADC_ConfigChannel+0x368>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10e      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x298>
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	045b      	lsls	r3, r3, #17
 80012e8:	4013      	ands	r3, r2
 80012ea:	d109      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x298>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	0452      	lsls	r2, r2, #17
 80012f2:	4313      	orrs	r3, r2
 80012f4:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 80012f6:	0019      	movs	r1, r3
 80012f8:	0010      	movs	r0, r2
 80012fa:	f7ff fa09 	bl	8000710 <LL_ADC_SetCommonPathInternalCh>
 80012fe:	e07b      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <HAL_ADC_ConfigChannel+0x36c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_ADC_ConfigChannel+0x2a4>
 800130a:	e075      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	03db      	lsls	r3, r3, #15
 8001312:	4013      	ands	r3, r2
 8001314:	d000      	beq.n	8001318 <HAL_ADC_ConfigChannel+0x2b0>
 8001316:	e06f      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	03d2      	lsls	r2, r2, #15
 800131e:	4313      	orrs	r3, r2
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 8001322:	0019      	movs	r1, r3
 8001324:	0010      	movs	r0, r2
 8001326:	f7ff f9f3 	bl	8000710 <LL_ADC_SetCommonPathInternalCh>
 800132a:	e065      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	061b      	lsls	r3, r3, #24
 8001334:	429a      	cmp	r2, r3
 8001336:	d004      	beq.n	8001342 <HAL_ADC_ConfigChannel+0x2da>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800133c:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_ADC_ConfigChannel+0x354>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d107      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x2ea>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0019      	movs	r1, r3
 800134c:	0010      	movs	r0, r2
 800134e:	f7ff fa5f 	bl	8000810 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	da4e      	bge.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff f9eb 	bl	8000738 <LL_ADC_GetCommonPathInternalCh>
 8001362:	0003      	movs	r3, r0
 8001364:	613b      	str	r3, [r7, #16]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_ADC_ConfigChannel+0x35c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_ADC_ConfigChannel+0x370>)
 8001374:	4013      	ands	r3, r2
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f7ff f9c8 	bl	8000710 <LL_ADC_SetCommonPathInternalCh>
 8001380:	e03a      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <HAL_ADC_ConfigChannel+0x368>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d108      	bne.n	800139e <HAL_ADC_ConfigChannel+0x336>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <HAL_ADC_ConfigChannel+0x374>)
 8001390:	4013      	ands	r3, r2
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 8001394:	0019      	movs	r1, r3
 8001396:	0010      	movs	r0, r2
 8001398:	f7ff f9ba 	bl	8000710 <LL_ADC_SetCommonPathInternalCh>
 800139c:	e02c      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_ADC_ConfigChannel+0x36c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d127      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_ADC_ConfigChannel+0x378>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_ADC_ConfigChannel+0x358>)
 80013b0:	0019      	movs	r1, r3
 80013b2:	0010      	movs	r0, r2
 80013b4:	f7ff f9ac 	bl	8000710 <LL_ADC_SetCommonPathInternalCh>
 80013b8:	e01e      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x390>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	80000004 	.word	0x80000004
 80013c0:	40012708 	.word	0x40012708
 80013c4:	b0001000 	.word	0xb0001000
 80013c8:	20000000 	.word	0x20000000
 80013cc:	00030d40 	.word	0x00030d40
 80013d0:	b8004000 	.word	0xb8004000
 80013d4:	b4002000 	.word	0xb4002000
 80013d8:	ff7fffff 	.word	0xff7fffff
 80013dc:	feffffff 	.word	0xfeffffff
 80013e0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	2220      	movs	r2, #32
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80013f0:	2317      	movs	r3, #23
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2254      	movs	r2, #84	; 0x54
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001400:	2317      	movs	r3, #23
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	781b      	ldrb	r3, [r3, #0]
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b006      	add	sp, #24
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)

08001410 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141a:	230f      	movs	r3, #15
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2254      	movs	r2, #84	; 0x54
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_ADC_AnalogWDGConfig+0x20>
 800142c:	2302      	movs	r3, #2
 800142e:	e269      	b.n	8001904 <HAL_ADC_AnalogWDGConfig+0x4f4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2254      	movs	r2, #84	; 0x54
 8001434:	2101      	movs	r1, #1
 8001436:	5499      	strb	r1, [r3, r2]
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fac5 	bl	80009cc <LL_ADC_REG_IsConversionOngoing>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d000      	beq.n	8001448 <HAL_ADC_AnalogWDGConfig+0x38>
 8001446:	e22a      	b.n	800189e <HAL_ADC_AnalogWDGConfig+0x48e>
  {
    /* Analog watchdog configuration */
    if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a93      	ldr	r2, [pc, #588]	; (800169c <HAL_ADC_AnalogWDGConfig+0x28c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d142      	bne.n	80014d8 <HAL_ADC_AnalogWDGConfig+0xc8>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch(AnalogWDGConfig->WatchdogMode)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	0412      	lsls	r2, r2, #16
 800145a:	4293      	cmp	r3, r2
 800145c:	d011      	beq.n	8001482 <HAL_ADC_AnalogWDGConfig+0x72>
 800145e:	22c0      	movs	r2, #192	; 0xc0
 8001460:	0412      	lsls	r2, r2, #16
 8001462:	4293      	cmp	r3, r2
 8001464:	d115      	bne.n	8001492 <HAL_ADC_AnalogWDGConfig+0x82>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel, LL_ADC_GROUP_REGULAR));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4a8c      	ldr	r2, [pc, #560]	; (80016a0 <HAL_ADC_AnalogWDGConfig+0x290>)
 8001470:	4013      	ands	r3, r2
 8001472:	22c0      	movs	r2, #192	; 0xc0
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	4313      	orrs	r3, r2
 8001478:	4988      	ldr	r1, [pc, #544]	; (800169c <HAL_ADC_AnalogWDGConfig+0x28c>)
 800147a:	001a      	movs	r2, r3
 800147c:	f7ff f9f6 	bl	800086c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001480:	e00f      	b.n	80014a2 <HAL_ADC_AnalogWDGConfig+0x92>
        
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a87      	ldr	r2, [pc, #540]	; (80016a4 <HAL_ADC_AnalogWDGConfig+0x294>)
 8001488:	4984      	ldr	r1, [pc, #528]	; (800169c <HAL_ADC_AnalogWDGConfig+0x28c>)
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff f9ee 	bl	800086c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001490:	e007      	b.n	80014a2 <HAL_ADC_AnalogWDGConfig+0x92>
        
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4981      	ldr	r1, [pc, #516]	; (800169c <HAL_ADC_AnalogWDGConfig+0x28c>)
 8001498:	2200      	movs	r2, #0
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff f9e6 	bl	800086c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80014a0:	46c0      	nop			; (mov r8, r8)
      }
      
      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <HAL_ADC_AnalogWDGConfig+0x298>)
 80014a8:	401a      	ands	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff fa9b 	bl	80009ee <LL_ADC_ClearFlag_AWD1>
      
      /* Configure ADC analog watchdog interrupt */
      if(AnalogWDGConfig->ITMode == ENABLE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	7b1b      	ldrb	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_ADC_AnalogWDGConfig+0xbc>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fab5 	bl	8000a34 <LL_ADC_EnableIT_AWD1>
 80014ca:	e1e8      	b.n	800189e <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff fadb 	bl	8000a8c <LL_ADC_DisableIT_AWD1>
 80014d6:	e1e2      	b.n	800189e <HAL_ADC_AnalogWDGConfig+0x48e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch(AnalogWDGConfig->WatchdogMode)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	0412      	lsls	r2, r2, #16
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d100      	bne.n	80014e6 <HAL_ADC_AnalogWDGConfig+0xd6>
 80014e4:	e18f      	b.n	8001806 <HAL_ADC_AnalogWDGConfig+0x3f6>
 80014e6:	22c0      	movs	r2, #192	; 0xc0
 80014e8:	0412      	lsls	r2, r2, #16
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d000      	beq.n	80014f0 <HAL_ADC_AnalogWDGConfig+0xe0>
 80014ee:	e193      	b.n	8001818 <HAL_ADC_AnalogWDGConfig+0x408>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6d      	ldr	r2, [pc, #436]	; (80016ac <HAL_ADC_AnalogWDGConfig+0x29c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d000      	beq.n	80014fc <HAL_ADC_AnalogWDGConfig+0xec>
 80014fa:	e0bc      	b.n	8001676 <HAL_ADC_AnalogWDGConfig+0x266>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	22a0      	movs	r2, #160	; 0xa0
 8001502:	5899      	ldr	r1, [r3, r2]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	035b      	lsls	r3, r3, #13
 800150a:	0b5b      	lsrs	r3, r3, #13
 800150c:	d108      	bne.n	8001520 <HAL_ADC_AnalogWDGConfig+0x110>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0e9b      	lsrs	r3, r3, #26
 8001514:	221f      	movs	r2, #31
 8001516:	4013      	ands	r3, r2
 8001518:	2201      	movs	r2, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	e0a4      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	d000      	beq.n	800152c <HAL_ADC_AnalogWDGConfig+0x11c>
 800152a:	e09d      	b.n	8001668 <HAL_ADC_AnalogWDGConfig+0x258>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d000      	beq.n	8001538 <HAL_ADC_AnalogWDGConfig+0x128>
 8001536:	e095      	b.n	8001664 <HAL_ADC_AnalogWDGConfig+0x254>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2204      	movs	r2, #4
 800153e:	4013      	ands	r3, r2
 8001540:	d000      	beq.n	8001544 <HAL_ADC_AnalogWDGConfig+0x134>
 8001542:	e08d      	b.n	8001660 <HAL_ADC_AnalogWDGConfig+0x250>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2208      	movs	r2, #8
 800154a:	4013      	ands	r3, r2
 800154c:	d000      	beq.n	8001550 <HAL_ADC_AnalogWDGConfig+0x140>
 800154e:	e085      	b.n	800165c <HAL_ADC_AnalogWDGConfig+0x24c>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2210      	movs	r2, #16
 8001556:	4013      	ands	r3, r2
 8001558:	d000      	beq.n	800155c <HAL_ADC_AnalogWDGConfig+0x14c>
 800155a:	e07d      	b.n	8001658 <HAL_ADC_AnalogWDGConfig+0x248>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2220      	movs	r2, #32
 8001562:	4013      	ands	r3, r2
 8001564:	d000      	beq.n	8001568 <HAL_ADC_AnalogWDGConfig+0x158>
 8001566:	e075      	b.n	8001654 <HAL_ADC_AnalogWDGConfig+0x244>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	4013      	ands	r3, r2
 8001570:	d000      	beq.n	8001574 <HAL_ADC_AnalogWDGConfig+0x164>
 8001572:	e06d      	b.n	8001650 <HAL_ADC_AnalogWDGConfig+0x240>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	4013      	ands	r3, r2
 800157c:	d000      	beq.n	8001580 <HAL_ADC_AnalogWDGConfig+0x170>
 800157e:	e065      	b.n	800164c <HAL_ADC_AnalogWDGConfig+0x23c>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d000      	beq.n	800158e <HAL_ADC_AnalogWDGConfig+0x17e>
 800158c:	e05b      	b.n	8001646 <HAL_ADC_AnalogWDGConfig+0x236>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d152      	bne.n	8001640 <HAL_ADC_AnalogWDGConfig+0x230>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4013      	ands	r3, r2
 80015a4:	d149      	bne.n	800163a <HAL_ADC_AnalogWDGConfig+0x22a>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d140      	bne.n	8001634 <HAL_ADC_AnalogWDGConfig+0x224>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	4013      	ands	r3, r2
 80015bc:	d137      	bne.n	800162e <HAL_ADC_AnalogWDGConfig+0x21e>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	4013      	ands	r3, r2
 80015c8:	d12e      	bne.n	8001628 <HAL_ADC_AnalogWDGConfig+0x218>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	01db      	lsls	r3, r3, #7
 80015d2:	4013      	ands	r3, r2
 80015d4:	d125      	bne.n	8001622 <HAL_ADC_AnalogWDGConfig+0x212>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	4013      	ands	r3, r2
 80015e0:	d11c      	bne.n	800161c <HAL_ADC_AnalogWDGConfig+0x20c>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	4013      	ands	r3, r2
 80015ec:	d113      	bne.n	8001616 <HAL_ADC_AnalogWDGConfig+0x206>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d10a      	bne.n	8001610 <HAL_ADC_AnalogWDGConfig+0x200>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	02db      	lsls	r3, r3, #11
 8001602:	4013      	ands	r3, r2
 8001604:	d002      	beq.n	800160c <HAL_ADC_AnalogWDGConfig+0x1fc>
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	02db      	lsls	r3, r3, #11
 800160a:	e02e      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 800160c:	2301      	movs	r3, #1
 800160e:	e02c      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	029b      	lsls	r3, r3, #10
 8001614:	e029      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	025b      	lsls	r3, r3, #9
 800161a:	e026      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	e023      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	01db      	lsls	r3, r3, #7
 8001626:	e020      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	019b      	lsls	r3, r3, #6
 800162c:	e01d      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	e01a      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	e017      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	e014      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	e011      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	e00e      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	e00c      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	e00a      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001654:	2320      	movs	r3, #32
 8001656:	e008      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001658:	2310      	movs	r3, #16
 800165a:	e006      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 800165c:	2308      	movs	r3, #8
 800165e:	e004      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001660:	2304      	movs	r3, #4
 8001662:	e002      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001664:	2302      	movs	r3, #2
 8001666:	e000      	b.n	800166a <HAL_ADC_AnalogWDGConfig+0x25a>
 8001668:	2301      	movs	r3, #1
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	430b      	orrs	r3, r1
 8001670:	21a0      	movs	r1, #160	; 0xa0
 8001672:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
          }
          break;
 8001674:	e0d9      	b.n	800182a <HAL_ADC_AnalogWDGConfig+0x41a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	22a4      	movs	r2, #164	; 0xa4
 800167c:	5899      	ldr	r1, [r3, r2]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	035b      	lsls	r3, r3, #13
 8001684:	0b5b      	lsrs	r3, r3, #13
 8001686:	d113      	bne.n	80016b0 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	0e9b      	lsrs	r3, r3, #26
 800168e:	221f      	movs	r2, #31
 8001690:	4013      	ands	r3, r2
 8001692:	2201      	movs	r2, #1
 8001694:	409a      	lsls	r2, r3
 8001696:	0013      	movs	r3, r2
 8001698:	e0af      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	7cc00000 	.word	0x7cc00000
 80016a0:	fc07ffff 	.word	0xfc07ffff
 80016a4:	0087ffff 	.word	0x0087ffff
 80016a8:	fffeffff 	.word	0xfffeffff
 80016ac:	0017ffff 	.word	0x0017ffff
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	d000      	beq.n	80016bc <HAL_ADC_AnalogWDGConfig+0x2ac>
 80016ba:	e09d      	b.n	80017f8 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d000      	beq.n	80016c8 <HAL_ADC_AnalogWDGConfig+0x2b8>
 80016c6:	e095      	b.n	80017f4 <HAL_ADC_AnalogWDGConfig+0x3e4>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2204      	movs	r2, #4
 80016ce:	4013      	ands	r3, r2
 80016d0:	d000      	beq.n	80016d4 <HAL_ADC_AnalogWDGConfig+0x2c4>
 80016d2:	e08d      	b.n	80017f0 <HAL_ADC_AnalogWDGConfig+0x3e0>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2208      	movs	r2, #8
 80016da:	4013      	ands	r3, r2
 80016dc:	d000      	beq.n	80016e0 <HAL_ADC_AnalogWDGConfig+0x2d0>
 80016de:	e085      	b.n	80017ec <HAL_ADC_AnalogWDGConfig+0x3dc>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2210      	movs	r2, #16
 80016e6:	4013      	ands	r3, r2
 80016e8:	d000      	beq.n	80016ec <HAL_ADC_AnalogWDGConfig+0x2dc>
 80016ea:	e07d      	b.n	80017e8 <HAL_ADC_AnalogWDGConfig+0x3d8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2220      	movs	r2, #32
 80016f2:	4013      	ands	r3, r2
 80016f4:	d000      	beq.n	80016f8 <HAL_ADC_AnalogWDGConfig+0x2e8>
 80016f6:	e075      	b.n	80017e4 <HAL_ADC_AnalogWDGConfig+0x3d4>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	4013      	ands	r3, r2
 8001700:	d000      	beq.n	8001704 <HAL_ADC_AnalogWDGConfig+0x2f4>
 8001702:	e06d      	b.n	80017e0 <HAL_ADC_AnalogWDGConfig+0x3d0>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	4013      	ands	r3, r2
 800170c:	d000      	beq.n	8001710 <HAL_ADC_AnalogWDGConfig+0x300>
 800170e:	e065      	b.n	80017dc <HAL_ADC_AnalogWDGConfig+0x3cc>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d000      	beq.n	800171e <HAL_ADC_AnalogWDGConfig+0x30e>
 800171c:	e05b      	b.n	80017d6 <HAL_ADC_AnalogWDGConfig+0x3c6>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4013      	ands	r3, r2
 8001728:	d152      	bne.n	80017d0 <HAL_ADC_AnalogWDGConfig+0x3c0>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4013      	ands	r3, r2
 8001734:	d149      	bne.n	80017ca <HAL_ADC_AnalogWDGConfig+0x3ba>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4013      	ands	r3, r2
 8001740:	d140      	bne.n	80017c4 <HAL_ADC_AnalogWDGConfig+0x3b4>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	015b      	lsls	r3, r3, #5
 800174a:	4013      	ands	r3, r2
 800174c:	d137      	bne.n	80017be <HAL_ADC_AnalogWDGConfig+0x3ae>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	4013      	ands	r3, r2
 8001758:	d12e      	bne.n	80017b8 <HAL_ADC_AnalogWDGConfig+0x3a8>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	01db      	lsls	r3, r3, #7
 8001762:	4013      	ands	r3, r2
 8001764:	d125      	bne.n	80017b2 <HAL_ADC_AnalogWDGConfig+0x3a2>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	4013      	ands	r3, r2
 8001770:	d11c      	bne.n	80017ac <HAL_ADC_AnalogWDGConfig+0x39c>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	4013      	ands	r3, r2
 800177c:	d113      	bne.n	80017a6 <HAL_ADC_AnalogWDGConfig+0x396>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d10a      	bne.n	80017a0 <HAL_ADC_AnalogWDGConfig+0x390>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	02db      	lsls	r3, r3, #11
 8001792:	4013      	ands	r3, r2
 8001794:	d002      	beq.n	800179c <HAL_ADC_AnalogWDGConfig+0x38c>
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	02db      	lsls	r3, r3, #11
 800179a:	e02e      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 800179c:	2301      	movs	r3, #1
 800179e:	e02c      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	e029      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	e026      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	e023      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	01db      	lsls	r3, r3, #7
 80017b6:	e020      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	019b      	lsls	r3, r3, #6
 80017bc:	e01d      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	e01a      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	e017      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	e014      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	e011      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	e00e      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	e00c      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017e0:	2340      	movs	r3, #64	; 0x40
 80017e2:	e00a      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017e4:	2320      	movs	r3, #32
 80017e6:	e008      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017e8:	2310      	movs	r3, #16
 80017ea:	e006      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017ec:	2308      	movs	r3, #8
 80017ee:	e004      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e002      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e000      	b.n	80017fa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80017f8:	2301      	movs	r3, #1
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	430b      	orrs	r3, r1
 8001800:	21a4      	movs	r1, #164	; 0xa4
 8001802:	5053      	str	r3, [r2, r1]
          break;
 8001804:	e011      	b.n	800182a <HAL_ADC_AnalogWDGConfig+0x41a>
          
        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a3f      	ldr	r2, [pc, #252]	; (800190c <HAL_ADC_AnalogWDGConfig+0x4fc>)
 8001810:	0019      	movs	r1, r3
 8001812:	f7ff f82b 	bl	800086c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001816:	e008      	b.n	800182a <HAL_ADC_AnalogWDGConfig+0x41a>
          
        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	0019      	movs	r1, r3
 8001824:	f7ff f822 	bl	800086c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8001828:	46c0      	nop			; (mov r8, r8)
      }
      
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_ADC_AnalogWDGConfig+0x500>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d11a      	bne.n	800186a <HAL_ADC_AnalogWDGConfig+0x45a>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	4a36      	ldr	r2, [pc, #216]	; (8001914 <HAL_ADC_AnalogWDGConfig+0x504>)
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff f8dd 	bl	8000a04 <LL_ADC_ClearFlag_AWD2>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	7b1b      	ldrb	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d105      	bne.n	800185e <HAL_ADC_AnalogWDGConfig+0x44e>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff f8fa 	bl	8000a50 <LL_ADC_EnableIT_AWD2>
 800185c:	e01f      	b.n	800189e <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0018      	movs	r0, r3
 8001864:	f7ff f922 	bl	8000aac <LL_ADC_DisableIT_AWD2>
 8001868:	e019      	b.n	800189e <HAL_ADC_AnalogWDGConfig+0x48e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <HAL_ADC_AnalogWDGConfig+0x508>)
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff f8ce 	bl	8000a1c <LL_ADC_ClearFlag_AWD3>
        
        /* Configure ADC analog watchdog interrupt */
        if(AnalogWDGConfig->ITMode == ENABLE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_ADC_AnalogWDGConfig+0x484>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff f8ee 	bl	8000a6e <LL_ADC_EnableIT_AWD3>
 8001892:	e004      	b.n	800189e <HAL_ADC_AnalogWDGConfig+0x48e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff f917 	bl	8000acc <LL_ADC_DisableIT_AWD3>
    }
    
  }
    
  /* Analog watchdog thresholds configuration */
  if(AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_ADC_AnalogWDGConfig+0x50c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d118      	bne.n	80018da <HAL_ADC_AnalogWDGConfig+0x4ca>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */ 
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	2103      	movs	r1, #3
 80018b6:	400b      	ands	r3, r1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	2103      	movs	r1, #3
 80018ce:	400b      	ands	r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	e005      	b.n	80018e6 <HAL_ADC_AnalogWDGConfig+0x4d6>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	617b      	str	r3, [r7, #20]
    tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	613b      	str	r3, [r7, #16]
  }
  
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	f7fe ffe7 	bl	80008c4 <LL_ADC_ConfigAnalogWDThresholds>
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2254      	movs	r2, #84	; 0x54
 80018fa:	2100      	movs	r1, #0
 80018fc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80018fe:	230f      	movs	r3, #15
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b006      	add	sp, #24
 800190a:	bd80      	pop	{r7, pc}
 800190c:	0087ffff 	.word	0x0087ffff
 8001910:	0017ffff 	.word	0x0017ffff
 8001914:	fffdffff 	.word	0xfffdffff
 8001918:	fffbffff 	.word	0xfffbffff
 800191c:	7cc00000 	.word	0x7cc00000

08001920 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff f829 	bl	8000984 <LL_ADC_IsEnabled>
 8001932:	1e03      	subs	r3, r0, #0
 8001934:	d149      	bne.n	80019ca <ADC_Enable+0xaa>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <ADC_Enable+0xb4>)
 800193e:	4013      	ands	r3, r2
 8001940:	d00d      	beq.n	800195e <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	2210      	movs	r2, #16
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	2201      	movs	r2, #1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e036      	b.n	80019cc <ADC_Enable+0xac>
    }
    
    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0018      	movs	r0, r3
 8001964:	f7fe fffc 	bl	8000960 <LL_ADC_Enable>
    
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7e5b      	ldrb	r3, [r3, #25]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d02c      	beq.n	80019ca <ADC_Enable+0xaa>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001970:	f7fe fec4 	bl	80006fc <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001978:	e020      	b.n	80019bc <ADC_Enable+0x9c>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff f800 	bl	8000984 <LL_ADC_IsEnabled>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d104      	bne.n	8001992 <ADC_Enable+0x72>
        {
          LL_ADC_Enable(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7fe ffe7 	bl	8000960 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001992:	f7fe feb3 	bl	80006fc <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d90d      	bls.n	80019bc <ADC_Enable+0x9c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	2210      	movs	r2, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2201      	movs	r2, #1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <ADC_Enable+0xac>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d1d7      	bne.n	800197a <ADC_Enable+0x5a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	80000017 	.word	0x80000017

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	0002      	movs	r2, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b7f      	cmp	r3, #127	; 0x7f
 80019ec:	d828      	bhi.n	8001a40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ee:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <__NVIC_SetPriority+0xd4>)
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	33c0      	adds	r3, #192	; 0xc0
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	589b      	ldr	r3, [r3, r2]
 80019fe:	1dfa      	adds	r2, r7, #7
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	0011      	movs	r1, r2
 8001a04:	2203      	movs	r2, #3
 8001a06:	400a      	ands	r2, r1
 8001a08:	00d2      	lsls	r2, r2, #3
 8001a0a:	21ff      	movs	r1, #255	; 0xff
 8001a0c:	4091      	lsls	r1, r2
 8001a0e:	000a      	movs	r2, r1
 8001a10:	43d2      	mvns	r2, r2
 8001a12:	401a      	ands	r2, r3
 8001a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	22ff      	movs	r2, #255	; 0xff
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	0018      	movs	r0, r3
 8001a24:	2303      	movs	r3, #3
 8001a26:	4003      	ands	r3, r0
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a2c:	481f      	ldr	r0, [pc, #124]	; (8001aac <__NVIC_SetPriority+0xd4>)
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	430a      	orrs	r2, r1
 8001a38:	33c0      	adds	r3, #192	; 0xc0
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a3e:	e031      	b.n	8001aa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <__NVIC_SetPriority+0xd8>)
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	0019      	movs	r1, r3
 8001a48:	230f      	movs	r3, #15
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	3b08      	subs	r3, #8
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3306      	adds	r3, #6
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	3304      	adds	r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	1dfa      	adds	r2, r7, #7
 8001a5c:	7812      	ldrb	r2, [r2, #0]
 8001a5e:	0011      	movs	r1, r2
 8001a60:	2203      	movs	r2, #3
 8001a62:	400a      	ands	r2, r1
 8001a64:	00d2      	lsls	r2, r2, #3
 8001a66:	21ff      	movs	r1, #255	; 0xff
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	43d2      	mvns	r2, r2
 8001a6e:	401a      	ands	r2, r3
 8001a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	019b      	lsls	r3, r3, #6
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	401a      	ands	r2, r3
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	2303      	movs	r3, #3
 8001a82:	4003      	ands	r3, r0
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <__NVIC_SetPriority+0xd8>)
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	001c      	movs	r4, r3
 8001a90:	230f      	movs	r3, #15
 8001a92:	4023      	ands	r3, r4
 8001a94:	3b08      	subs	r3, #8
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	3306      	adds	r3, #6
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	18c3      	adds	r3, r0, r3
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b003      	add	sp, #12
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <SysTick_Config+0x40>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e010      	b.n	8001aec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <SysTick_Config+0x44>)
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ff7d 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SysTick_Config+0x44>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x44>)
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	00ffffff 	.word	0x00ffffff
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	210f      	movs	r1, #15
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	1c02      	adds	r2, r0, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	0011      	movs	r1, r2
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff ffbf 	bl	8001ab4 <SysTick_Config>
 8001b36:	0003      	movs	r3, r0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e147      	b.n	8001de0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d100      	bne.n	8001b68 <HAL_GPIO_Init+0x28>
 8001b66:	e138      	b.n	8001dda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x38>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b12      	cmp	r3, #18
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	58d3      	ldr	r3, [r2, r3]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	43da      	mvns	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2107      	movs	r1, #7
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	6939      	ldr	r1, [r7, #16]
 8001bbe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d00b      	beq.n	8001c14 <HAL_GPIO_Init+0xd4>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c08:	2b11      	cmp	r3, #17
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b12      	cmp	r3, #18
 8001c12:	d130      	bne.n	8001c76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	409a      	lsls	r2, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	43da      	mvns	r2, r3
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	0013      	movs	r3, r2
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	2201      	movs	r2, #1
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	43da      	mvns	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	055b      	lsls	r3, r3, #21
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_Init+0x174>
 8001cb2:	e092      	b.n	8001dda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3318      	adds	r3, #24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	589b      	ldr	r3, [r3, r2]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	220f      	movs	r2, #15
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	23a0      	movs	r3, #160	; 0xa0
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x1ca>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_GPIO_Init+0x2bc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x1c6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a44      	ldr	r2, [pc, #272]	; (8001e00 <HAL_GPIO_Init+0x2c0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x1c2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <HAL_GPIO_Init+0x2c4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x1be>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001cfe:	2305      	movs	r3, #5
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x1cc>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	2103      	movs	r1, #3
 8001d10:	400a      	ands	r2, r1
 8001d12:	00d2      	lsls	r2, r2, #3
 8001d14:	4093      	lsls	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d1c:	4936      	ldr	r1, [pc, #216]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3318      	adds	r3, #24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d2a:	4a33      	ldr	r2, [pc, #204]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	58d3      	ldr	r3, [r2, r3]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43da      	mvns	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	025b      	lsls	r3, r3, #9
 8001d44:	4013      	ands	r3, r2
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d50:	4929      	ldr	r1, [pc, #164]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001d58:	4a27      	ldr	r2, [pc, #156]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d5a:	2384      	movs	r3, #132	; 0x84
 8001d5c:	58d3      	ldr	r3, [r2, r3]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43da      	mvns	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	029b      	lsls	r3, r3, #10
 8001d72:	4013      	ands	r3, r2
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7e:	491e      	ldr	r1, [pc, #120]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d80:	2284      	movs	r2, #132	; 0x84
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	035b      	lsls	r3, r3, #13
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	039b      	lsls	r3, r3, #14
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	40da      	lsrs	r2, r3
 8001de8:	1e13      	subs	r3, r2, #0
 8001dea:	d000      	beq.n	8001dee <HAL_GPIO_Init+0x2ae>
 8001dec:	e6b0      	b.n	8001b50 <HAL_GPIO_Init+0x10>
  }
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b006      	add	sp, #24
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	50000400 	.word	0x50000400
 8001e00:	50000800 	.word	0x50000800
 8001e04:	50000c00 	.word	0x50000c00

08001e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d11f      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	0013      	movs	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	189b      	adds	r3, r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4912      	ldr	r1, [pc, #72]	; (8001e84 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7fe f962 	bl	8000104 <__udivsi3>
 8001e40:	0003      	movs	r3, r0
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e46:	e008      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e001      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e009      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	401a      	ands	r2, r3
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d0ed      	beq.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b004      	add	sp, #16
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	fffff9ff 	.word	0xfffff9ff
 8001e80:	20000000 	.word	0x20000000
 8001e84:	000f4240 	.word	0x000f4240

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e304      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x1e>
 8001ea4:	e07c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4bc3      	ldr	r3, [pc, #780]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2238      	movs	r2, #56	; 0x38
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	4bc0      	ldr	r3, [pc, #768]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3e>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4bb9      	ldr	r3, [pc, #740]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d062      	beq.n	8001f9e <HAL_RCC_OscConfig+0x116>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d15e      	bne.n	8001f9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e2df      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	025b      	lsls	r3, r3, #9
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_OscConfig+0x78>
 8001ef0:	4bb0      	ldr	r3, [pc, #704]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4baf      	ldr	r3, [pc, #700]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	0249      	lsls	r1, r1, #9
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e020      	b.n	8001f42 <HAL_RCC_OscConfig+0xba>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	23a0      	movs	r3, #160	; 0xa0
 8001f06:	02db      	lsls	r3, r3, #11
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10e      	bne.n	8001f2a <HAL_RCC_OscConfig+0xa2>
 8001f0c:	4ba9      	ldr	r3, [pc, #676]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4ba8      	ldr	r3, [pc, #672]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	02c9      	lsls	r1, r1, #11
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	4ba6      	ldr	r3, [pc, #664]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4ba5      	ldr	r3, [pc, #660]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	0249      	lsls	r1, r1, #9
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0xba>
 8001f2a:	4ba2      	ldr	r3, [pc, #648]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4ba1      	ldr	r3, [pc, #644]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	49a1      	ldr	r1, [pc, #644]	; (80021b8 <HAL_RCC_OscConfig+0x330>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	4b9f      	ldr	r3, [pc, #636]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	499f      	ldr	r1, [pc, #636]	; (80021bc <HAL_RCC_OscConfig+0x334>)
 8001f3e:	400a      	ands	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d014      	beq.n	8001f74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fbd7 	bl	80006fc <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7fe fbd2 	bl	80006fc <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e29e      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f66:	4b93      	ldr	r3, [pc, #588]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xcc>
 8001f72:	e015      	b.n	8001fa0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fbc2 	bl	80006fc <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fbbd 	bl	80006fc <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	; 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e289      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f90:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0xf6>
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d100      	bne.n	8001fac <HAL_RCC_OscConfig+0x124>
 8001faa:	e099      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fac:	4b81      	ldr	r3, [pc, #516]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2238      	movs	r2, #56	; 0x38
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_OscConfig+0x144>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d002      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x14a>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d135      	bne.n	800203e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd2:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x162>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e25c      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a74      	ldr	r2, [pc, #464]	; (80021c0 <HAL_RCC_OscConfig+0x338>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	021a      	lsls	r2, r3, #8
 8001ffa:	4b6e      	ldr	r3, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d112      	bne.n	800202c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002006:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x33c>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800201a:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0adb      	lsrs	r3, r3, #11
 8002020:	2207      	movs	r2, #7
 8002022:	4013      	ands	r3, r2
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x340>)
 8002026:	40da      	lsrs	r2, r3
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x344>)
 800202a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x348>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0018      	movs	r0, r3
 8002032:	f7fe fb09 	bl	8000648 <HAL_InitTick>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d051      	beq.n	80020de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e232      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d030      	beq.n	80020a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002046:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5e      	ldr	r2, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x33c>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800205a:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0049      	lsls	r1, r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fb48 	bl	80006fc <HAL_GetTick>
 800206c:	0003      	movs	r3, r0
 800206e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7fe fb43 	bl	80006fc <HAL_GetTick>
 8002076:	0002      	movs	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e20f      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002084:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4013      	ands	r3, r2
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <HAL_RCC_OscConfig+0x338>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 80020ae:	4949      	ldr	r1, [pc, #292]	; (80021d4 <HAL_RCC_OscConfig+0x34c>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fb22 	bl	80006fc <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020be:	f7fe fb1d 	bl	80006fc <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e1e9      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d0:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4013      	ands	r3, r2
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x236>
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2208      	movs	r2, #8
 80020e6:	4013      	ands	r3, r2
 80020e8:	d047      	beq.n	800217a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2238      	movs	r2, #56	; 0x38
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b18      	cmp	r3, #24
 80020f4:	d10a      	bne.n	800210c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020f6:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d03c      	beq.n	800217a <HAL_RCC_OscConfig+0x2f2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d138      	bne.n	800217a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e1cb      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d019      	beq.n	8002148 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002116:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002118:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800211a:	2101      	movs	r1, #1
 800211c:	430a      	orrs	r2, r1
 800211e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe faec 	bl	80006fc <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212a:	f7fe fae7 	bl	80006fc <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1b3      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d0f1      	beq.n	800212a <HAL_RCC_OscConfig+0x2a2>
 8002146:	e018      	b.n	800217a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800214a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe fad2 	bl	80006fc <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7fe facd 	bl	80006fc <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e199      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002174:	2202      	movs	r2, #2
 8002176:	4013      	ands	r3, r2
 8002178:	d1f1      	bne.n	800215e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2204      	movs	r2, #4
 8002180:	4013      	ands	r3, r2
 8002182:	d100      	bne.n	8002186 <HAL_RCC_OscConfig+0x2fe>
 8002184:	e0c6      	b.n	8002314 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	231f      	movs	r3, #31
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2238      	movs	r2, #56	; 0x38
 8002194:	4013      	ands	r3, r2
 8002196:	2b20      	cmp	r3, #32
 8002198:	d11e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_OscConfig+0x32c>)
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	2202      	movs	r2, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_RCC_OscConfig+0x31e>
 80021a4:	e0b6      	b.n	8002314 <HAL_RCC_OscConfig+0x48c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d000      	beq.n	80021b0 <HAL_RCC_OscConfig+0x328>
 80021ae:	e0b1      	b.n	8002314 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e177      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	fffeffff 	.word	0xfffeffff
 80021bc:	fffbffff 	.word	0xfffbffff
 80021c0:	ffff80ff 	.word	0xffff80ff
 80021c4:	ffffc7ff 	.word	0xffffc7ff
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000004 	.word	0x20000004
 80021d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d8:	4bb4      	ldr	r3, [pc, #720]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80021da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	055b      	lsls	r3, r3, #21
 80021e0:	4013      	ands	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x360>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x362>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d011      	beq.n	8002212 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4baf      	ldr	r3, [pc, #700]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80021f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021f2:	4bae      	ldr	r3, [pc, #696]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0549      	lsls	r1, r1, #21
 80021f8:	430a      	orrs	r2, r1
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80021fc:	4bab      	ldr	r3, [pc, #684]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80021fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	055b      	lsls	r3, r3, #21
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800220a:	231f      	movs	r3, #31
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002212:	4ba7      	ldr	r3, [pc, #668]	; (80024b0 <HAL_RCC_OscConfig+0x628>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d11a      	bne.n	8002254 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221e:	4ba4      	ldr	r3, [pc, #656]	; (80024b0 <HAL_RCC_OscConfig+0x628>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4ba3      	ldr	r3, [pc, #652]	; (80024b0 <HAL_RCC_OscConfig+0x628>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0049      	lsls	r1, r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800222c:	f7fe fa66 	bl	80006fc <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7fe fa61 	bl	80006fc <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e12d      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002248:	4b99      	ldr	r3, [pc, #612]	; (80024b0 <HAL_RCC_OscConfig+0x628>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x3e2>
 800225c:	4b93      	ldr	r3, [pc, #588]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800225e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002260:	4b92      	ldr	r3, [pc, #584]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002262:	2101      	movs	r1, #1
 8002264:	430a      	orrs	r2, r1
 8002266:	65da      	str	r2, [r3, #92]	; 0x5c
 8002268:	e01c      	b.n	80022a4 <HAL_RCC_OscConfig+0x41c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x404>
 8002272:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002276:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002278:	2104      	movs	r1, #4
 800227a:	430a      	orrs	r2, r1
 800227c:	65da      	str	r2, [r3, #92]	; 0x5c
 800227e:	4b8b      	ldr	r3, [pc, #556]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002282:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002284:	2101      	movs	r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	65da      	str	r2, [r3, #92]	; 0x5c
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0x41c>
 800228c:	4b87      	ldr	r3, [pc, #540]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800228e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002290:	4b86      	ldr	r3, [pc, #536]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002292:	2101      	movs	r1, #1
 8002294:	438a      	bics	r2, r1
 8002296:	65da      	str	r2, [r3, #92]	; 0x5c
 8002298:	4b84      	ldr	r3, [pc, #528]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800229a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800229c:	4b83      	ldr	r3, [pc, #524]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800229e:	2104      	movs	r1, #4
 80022a0:	438a      	bics	r2, r1
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d014      	beq.n	80022d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fa26 	bl	80006fc <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b4:	e009      	b.n	80022ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7fe fa21 	bl	80006fc <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x62c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0ec      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80022cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x42e>
 80022d4:	e013      	b.n	80022fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fa11 	bl	80006fc <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022de:	e009      	b.n	80022f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fa0c 	bl	80006fc <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x62c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0d7      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	2202      	movs	r2, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022fe:	231f      	movs	r3, #31
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800230a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230c:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800230e:	496a      	ldr	r1, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x630>)
 8002310:	400a      	ands	r2, r1
 8002312:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d100      	bne.n	800231e <HAL_RCC_OscConfig+0x496>
 800231c:	e0c1      	b.n	80024a2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2238      	movs	r2, #56	; 0x38
 8002324:	4013      	ands	r3, r2
 8002326:	2b10      	cmp	r3, #16
 8002328:	d100      	bne.n	800232c <HAL_RCC_OscConfig+0x4a4>
 800232a:	e081      	b.n	8002430 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d156      	bne.n	80023e2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800233a:	4960      	ldr	r1, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x634>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe f9dc 	bl	80006fc <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe f9d7 	bl	80006fc <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0a3      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	049b      	lsls	r3, r3, #18
 8002364:	4013      	ands	r3, r2
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_RCC_OscConfig+0x638>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	431a      	orrs	r2, r3
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b43      	ldr	r3, [pc, #268]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0449      	lsls	r1, r1, #17
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0549      	lsls	r1, r1, #21
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe f9a0 	bl	80006fc <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe f99b 	bl	80006fc <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e067      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x53a>
 80023e0:	e05f      	b.n	80024a2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023e8:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x634>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023f4:	2103      	movs	r1, #3
 80023f6:	438a      	bics	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002400:	4930      	ldr	r1, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x63c>)
 8002402:	400a      	ands	r2, r1
 8002404:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe f979 	bl	80006fc <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe f974 	bl	80006fc <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e040      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	049b      	lsls	r3, r3, #18
 800242a:	4013      	ands	r3, r2
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x588>
 800242e:	e038      	b.n	80024a2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e033      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x624>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2203      	movs	r2, #3
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d126      	bne.n	800249e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2270      	movs	r2, #112	; 0x70
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11f      	bne.n	800249e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	23fe      	movs	r3, #254	; 0xfe
 8002462:	01db      	lsls	r3, r3, #7
 8002464:	401a      	ands	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d116      	bne.n	800249e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	23f8      	movs	r3, #248	; 0xf8
 8002474:	039b      	lsls	r3, r3, #14
 8002476:	401a      	ands	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d10e      	bne.n	800249e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	23e0      	movs	r3, #224	; 0xe0
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	0f5b      	lsrs	r3, r3, #29
 8002494:	075a      	lsls	r2, r3, #29
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b008      	add	sp, #32
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	00001388 	.word	0x00001388
 80024b8:	efffffff 	.word	0xefffffff
 80024bc:	feffffff 	.word	0xfeffffff
 80024c0:	11c1808c 	.word	0x11c1808c
 80024c4:	eefeffff 	.word	0xeefeffff

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0e9      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2207      	movs	r2, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d91e      	bls.n	8002528 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2207      	movs	r2, #7
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	4b70      	ldr	r3, [pc, #448]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024fc:	f7fe f8fe 	bl	80006fc <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002504:	e009      	b.n	800251a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002506:	f7fe f8f9 	bl	80006fc <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	4a6a      	ldr	r2, [pc, #424]	; (80026bc <HAL_RCC_ClockConfig+0x1f4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0ca      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2202      	movs	r2, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d015      	beq.n	800255e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	4013      	ands	r3, r2
 800253a:	d006      	beq.n	800254a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800253c:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002542:	21e0      	movs	r1, #224	; 0xe0
 8002544:	01c9      	lsls	r1, r1, #7
 8002546:	430a      	orrs	r2, r1
 8002548:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_RCC_ClockConfig+0x1fc>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2201      	movs	r2, #1
 8002564:	4013      	ands	r3, r2
 8002566:	d057      	beq.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	4013      	ands	r3, r2
 800257a:	d12b      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e097      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d107      	bne.n	8002598 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002588:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	049b      	lsls	r3, r3, #18
 8002590:	4013      	ands	r3, r2
 8002592:	d11f      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e08b      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4013      	ands	r3, r2
 80025aa:	d113      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e07f      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b8:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e074      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c6:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e06d      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2207      	movs	r2, #7
 80025da:	4393      	bics	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e8:	f7fe f888 	bl	80006fc <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f0:	e009      	b.n	8002606 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f2:	f7fe f883 	bl	80006fc <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_RCC_ClockConfig+0x1f4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e054      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2238      	movs	r2, #56	; 0x38
 800260c:	401a      	ands	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	429a      	cmp	r2, r3
 8002616:	d1ec      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2207      	movs	r2, #7
 800261e:	4013      	ands	r3, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d21e      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2207      	movs	r2, #7
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002638:	f7fe f860 	bl	80006fc <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002640:	e009      	b.n	8002656 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002642:	f7fe f85b 	bl	80006fc <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_RCC_ClockConfig+0x1f4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e02c      	b.n	80026b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2207      	movs	r2, #7
 800265c:	4013      	ands	r3, r2
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d1ee      	bne.n	8002642 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2204      	movs	r2, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <HAL_RCC_ClockConfig+0x200>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002682:	f000 f829 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002686:	0001      	movs	r1, r0
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	220f      	movs	r2, #15
 8002690:	401a      	ands	r2, r3
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x204>)
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	58d3      	ldr	r3, [r2, r3]
 8002698:	221f      	movs	r2, #31
 800269a:	4013      	ands	r3, r2
 800269c:	000a      	movs	r2, r1
 800269e:	40da      	lsrs	r2, r3
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x208>)
 80026a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_ClockConfig+0x20c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7fd ffcd 	bl	8000648 <HAL_InitTick>
 80026ae:	0003      	movs	r3, r0
}
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b004      	add	sp, #16
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40022000 	.word	0x40022000
 80026bc:	00001388 	.word	0x00001388
 80026c0:	40021000 	.word	0x40021000
 80026c4:	fffff0ff 	.word	0xfffff0ff
 80026c8:	ffff8fff 	.word	0xffff8fff
 80026cc:	08002b40 	.word	0x08002b40
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026de:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	4013      	ands	r3, r2
 80026e6:	d10f      	bne.n	8002708 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0adb      	lsrs	r3, r3, #11
 80026ee:	2207      	movs	r2, #7
 80026f0:	4013      	ands	r3, r2
 80026f2:	2201      	movs	r2, #1
 80026f4:	409a      	lsls	r2, r3
 80026f6:	0013      	movs	r3, r2
 80026f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	4835      	ldr	r0, [pc, #212]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026fe:	f7fd fd01 	bl	8000104 <__udivsi3>
 8002702:	0003      	movs	r3, r0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	e05d      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2238      	movs	r2, #56	; 0x38
 800270e:	4013      	ands	r3, r2
 8002710:	2b08      	cmp	r3, #8
 8002712:	d102      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e054      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	2b10      	cmp	r3, #16
 8002724:	d138      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2203      	movs	r2, #3
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	2207      	movs	r2, #7
 8002738:	4013      	ands	r3, r2
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	4824      	ldr	r0, [pc, #144]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002748:	f7fd fcdc 	bl	8000104 <__udivsi3>
 800274c:	0003      	movs	r3, r0
 800274e:	0019      	movs	r1, r3
 8002750:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	227f      	movs	r2, #127	; 0x7f
 8002758:	4013      	ands	r3, r2
 800275a:	434b      	muls	r3, r1
 800275c:	617b      	str	r3, [r7, #20]
        break;
 800275e:	e00d      	b.n	800277c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	481c      	ldr	r0, [pc, #112]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002764:	f7fd fcce 	bl	8000104 <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	0019      	movs	r1, r3
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	227f      	movs	r2, #127	; 0x7f
 8002774:	4013      	ands	r3, r2
 8002776:	434b      	muls	r3, r1
 8002778:	617b      	str	r3, [r7, #20]
        break;
 800277a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0f5b      	lsrs	r3, r3, #29
 8002782:	2207      	movs	r2, #7
 8002784:	4013      	ands	r3, r2
 8002786:	3301      	adds	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6978      	ldr	r0, [r7, #20]
 800278e:	f7fd fcb9 	bl	8000104 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	e015      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2238      	movs	r2, #56	; 0x38
 800279e:	4013      	ands	r3, r2
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d103      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2238      	movs	r2, #56	; 0x38
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b18      	cmp	r3, #24
 80027b6:	d103      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80027b8:	23fa      	movs	r3, #250	; 0xfa
 80027ba:	01db      	lsls	r3, r3, #7
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	e001      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027c4:	693b      	ldr	r3, [r7, #16]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b006      	add	sp, #24
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	40021000 	.word	0x40021000
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027e4:	2313      	movs	r3, #19
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ec:	2312      	movs	r3, #18
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	029b      	lsls	r3, r3, #10
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002800:	e0a4      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2311      	movs	r3, #17
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4ba5      	ldr	r3, [pc, #660]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800280c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	055b      	lsls	r3, r3, #21
 8002812:	4013      	ands	r3, r2
 8002814:	d111      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4ba2      	ldr	r3, [pc, #648]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800281a:	4ba1      	ldr	r3, [pc, #644]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0549      	lsls	r1, r1, #21
 8002820:	430a      	orrs	r2, r1
 8002822:	63da      	str	r2, [r3, #60]	; 0x3c
 8002824:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	055b      	lsls	r3, r3, #21
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2311      	movs	r3, #17
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800283a:	4b9a      	ldr	r3, [pc, #616]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0049      	lsls	r1, r1, #1
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002848:	f7fd ff58 	bl	80006fc <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002850:	e00b      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fd ff53 	bl	80006fc <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d904      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002860:	2313      	movs	r3, #19
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2203      	movs	r2, #3
 8002866:	701a      	strb	r2, [r3, #0]
        break;
 8002868:	e005      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286a:	4b8e      	ldr	r3, [pc, #568]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d0ed      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002876:	2313      	movs	r3, #19
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d154      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002880:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002884:	23c0      	movs	r3, #192	; 0xc0
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d014      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	4a81      	ldr	r2, [pc, #516]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a6:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0249      	lsls	r1, r1, #9
 80028b0:	430a      	orrs	r2, r1
 80028b2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b4:	4b7a      	ldr	r3, [pc, #488]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028b8:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ba:	497c      	ldr	r1, [pc, #496]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80028bc:	400a      	ands	r2, r1
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c0:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2201      	movs	r2, #1
 80028ca:	4013      	ands	r3, r2
 80028cc:	d016      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fd ff15 	bl	80006fc <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d6:	e00c      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d8:	f7fd ff10 	bl	80006fc <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	4a73      	ldr	r2, [pc, #460]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d904      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80028e8:	2313      	movs	r3, #19
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2203      	movs	r2, #3
 80028ee:	701a      	strb	r2, [r3, #0]
            break;
 80028f0:	e004      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0ed      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80028fc:	2313      	movs	r3, #19
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002906:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800290c:	4013      	ands	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002916:	430a      	orrs	r2, r1
 8002918:	65da      	str	r2, [r3, #92]	; 0x5c
 800291a:	e00c      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800291c:	2312      	movs	r3, #18
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2213      	movs	r2, #19
 8002922:	18ba      	adds	r2, r7, r2
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e005      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	2312      	movs	r3, #18
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2213      	movs	r2, #19
 8002930:	18ba      	adds	r2, r7, r2
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002936:	2311      	movs	r3, #17
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002944:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002946:	495b      	ldr	r1, [pc, #364]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002948:	400a      	ands	r2, r1
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	2203      	movs	r2, #3
 800295c:	4393      	bics	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002966:	430a      	orrs	r2, r1
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2220      	movs	r2, #32
 8002970:	4013      	ands	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002984:	430a      	orrs	r2, r1
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d009      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800299a:	4013      	ands	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4013      	ands	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	4a41      	ldr	r2, [pc, #260]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029c4:	430a      	orrs	r2, r1
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	4013      	ands	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d2:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	4a3b      	ldr	r2, [pc, #236]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029d8:	4013      	ands	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	01db      	lsls	r3, r3, #7
 80029ee:	4013      	ands	r3, r2
 80029f0:	d015      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	0899      	lsrs	r1, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a00:	430a      	orrs	r2, r1
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	05db      	lsls	r3, r3, #23
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a16:	2180      	movs	r1, #128	; 0x80
 8002a18:	0249      	lsls	r1, r1, #9
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	039b      	lsls	r3, r3, #14
 8002a26:	4013      	ands	r3, r2
 8002a28:	d016      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1a      	ldr	r2, [r3, #32]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	03db      	lsls	r3, r3, #15
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d106      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	0449      	lsls	r1, r1, #17
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	d016      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a74:	430a      	orrs	r2, r1
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	01db      	lsls	r3, r3, #7
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0249      	lsls	r1, r1, #9
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002a92:	2312      	movs	r3, #18
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b006      	add	sp, #24
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	fffffcff 	.word	0xfffffcff
 8002aac:	fffeffff 	.word	0xfffeffff
 8002ab0:	00001388 	.word	0x00001388
 8002ab4:	efffffff 	.word	0xefffffff
 8002ab8:	fffff3ff 	.word	0xfffff3ff
 8002abc:	fff3ffff 	.word	0xfff3ffff
 8002ac0:	ffcfffff 	.word	0xffcfffff
 8002ac4:	ffffcfff 	.word	0xffffcfff
 8002ac8:	ffbfffff 	.word	0xffbfffff
 8002acc:	ffff3fff 	.word	0xffff3fff

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	4d0c      	ldr	r5, [pc, #48]	; (8002b08 <__libc_init_array+0x38>)
 8002ad6:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	2600      	movs	r6, #0
 8002ae2:	f000 f821 	bl	8002b28 <_init>
 8002ae6:	4d0a      	ldr	r5, [pc, #40]	; (8002b10 <__libc_init_array+0x40>)
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <__libc_init_array+0x44>)
 8002aea:	1b64      	subs	r4, r4, r5
 8002aec:	10a4      	asrs	r4, r4, #2
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	00b3      	lsls	r3, r6, #2
 8002af6:	58eb      	ldr	r3, [r5, r3]
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	00b3      	lsls	r3, r6, #2
 8002b00:	58eb      	ldr	r3, [r5, r3]
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08002b80 	.word	0x08002b80
 8002b0c:	08002b80 	.word	0x08002b80
 8002b10:	08002b80 	.word	0x08002b80
 8002b14:	08002b84 	.word	0x08002b84

08002b18 <memset>:
 8002b18:	0003      	movs	r3, r0
 8002b1a:	1812      	adds	r2, r2, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	7019      	strb	r1, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <_init>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr

08002b34 <_fini>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr
