
niipnnp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000280c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c8  080029c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029c8  080029c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c8  080029c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  080029dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080029dc  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000488d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001336  00000000  00000000  000248c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  00025bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c0  00000000  00000000  00026170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013801  00000000  00000000  00026630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000055c0  00000000  00000000  00039e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000798a0  00000000  00000000  0003f3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8c91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001300  00000000  00000000  000b8d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080028b0 	.word	0x080028b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080028b0 	.word	0x080028b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_f2uiz>:
 800021c:	219e      	movs	r1, #158	; 0x9e
 800021e:	b510      	push	{r4, lr}
 8000220:	05c9      	lsls	r1, r1, #23
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	f000 fcaa 	bl	8000b7c <__aeabi_fcmpge>
 8000228:	2800      	cmp	r0, #0
 800022a:	d103      	bne.n	8000234 <__aeabi_f2uiz+0x18>
 800022c:	1c20      	adds	r0, r4, #0
 800022e:	f000 fc15 	bl	8000a5c <__aeabi_f2iz>
 8000232:	bd10      	pop	{r4, pc}
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	1c20      	adds	r0, r4, #0
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	f000 fa4b 	bl	80006d4 <__aeabi_fsub>
 800023e:	f000 fc0d 	bl	8000a5c <__aeabi_f2iz>
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	061b      	lsls	r3, r3, #24
 8000246:	469c      	mov	ip, r3
 8000248:	4460      	add	r0, ip
 800024a:	e7f2      	b.n	8000232 <__aeabi_f2uiz+0x16>

0800024c <__aeabi_fdiv>:
 800024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024e:	4657      	mov	r7, sl
 8000250:	464e      	mov	r6, r9
 8000252:	4645      	mov	r5, r8
 8000254:	46de      	mov	lr, fp
 8000256:	0244      	lsls	r4, r0, #9
 8000258:	b5e0      	push	{r5, r6, r7, lr}
 800025a:	0046      	lsls	r6, r0, #1
 800025c:	4688      	mov	r8, r1
 800025e:	0a64      	lsrs	r4, r4, #9
 8000260:	0e36      	lsrs	r6, r6, #24
 8000262:	0fc7      	lsrs	r7, r0, #31
 8000264:	2e00      	cmp	r6, #0
 8000266:	d063      	beq.n	8000330 <__aeabi_fdiv+0xe4>
 8000268:	2eff      	cmp	r6, #255	; 0xff
 800026a:	d024      	beq.n	80002b6 <__aeabi_fdiv+0x6a>
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	00e4      	lsls	r4, r4, #3
 8000270:	04db      	lsls	r3, r3, #19
 8000272:	431c      	orrs	r4, r3
 8000274:	2300      	movs	r3, #0
 8000276:	4699      	mov	r9, r3
 8000278:	469b      	mov	fp, r3
 800027a:	3e7f      	subs	r6, #127	; 0x7f
 800027c:	4643      	mov	r3, r8
 800027e:	4642      	mov	r2, r8
 8000280:	025d      	lsls	r5, r3, #9
 8000282:	0fd2      	lsrs	r2, r2, #31
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	0a6d      	lsrs	r5, r5, #9
 8000288:	0e1b      	lsrs	r3, r3, #24
 800028a:	4690      	mov	r8, r2
 800028c:	4692      	mov	sl, r2
 800028e:	d065      	beq.n	800035c <__aeabi_fdiv+0x110>
 8000290:	2bff      	cmp	r3, #255	; 0xff
 8000292:	d055      	beq.n	8000340 <__aeabi_fdiv+0xf4>
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	2100      	movs	r1, #0
 8000298:	00ed      	lsls	r5, r5, #3
 800029a:	04d2      	lsls	r2, r2, #19
 800029c:	3b7f      	subs	r3, #127	; 0x7f
 800029e:	4315      	orrs	r5, r2
 80002a0:	1af6      	subs	r6, r6, r3
 80002a2:	4643      	mov	r3, r8
 80002a4:	464a      	mov	r2, r9
 80002a6:	407b      	eors	r3, r7
 80002a8:	2a0f      	cmp	r2, #15
 80002aa:	d900      	bls.n	80002ae <__aeabi_fdiv+0x62>
 80002ac:	e08d      	b.n	80003ca <__aeabi_fdiv+0x17e>
 80002ae:	486d      	ldr	r0, [pc, #436]	; (8000464 <__aeabi_fdiv+0x218>)
 80002b0:	0092      	lsls	r2, r2, #2
 80002b2:	5882      	ldr	r2, [r0, r2]
 80002b4:	4697      	mov	pc, r2
 80002b6:	2c00      	cmp	r4, #0
 80002b8:	d154      	bne.n	8000364 <__aeabi_fdiv+0x118>
 80002ba:	2308      	movs	r3, #8
 80002bc:	4699      	mov	r9, r3
 80002be:	3b06      	subs	r3, #6
 80002c0:	26ff      	movs	r6, #255	; 0xff
 80002c2:	469b      	mov	fp, r3
 80002c4:	e7da      	b.n	800027c <__aeabi_fdiv+0x30>
 80002c6:	2500      	movs	r5, #0
 80002c8:	4653      	mov	r3, sl
 80002ca:	2902      	cmp	r1, #2
 80002cc:	d01b      	beq.n	8000306 <__aeabi_fdiv+0xba>
 80002ce:	2903      	cmp	r1, #3
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fdiv+0x88>
 80002d2:	e0bf      	b.n	8000454 <__aeabi_fdiv+0x208>
 80002d4:	2901      	cmp	r1, #1
 80002d6:	d028      	beq.n	800032a <__aeabi_fdiv+0xde>
 80002d8:	0030      	movs	r0, r6
 80002da:	307f      	adds	r0, #127	; 0x7f
 80002dc:	2800      	cmp	r0, #0
 80002de:	dd20      	ble.n	8000322 <__aeabi_fdiv+0xd6>
 80002e0:	076a      	lsls	r2, r5, #29
 80002e2:	d004      	beq.n	80002ee <__aeabi_fdiv+0xa2>
 80002e4:	220f      	movs	r2, #15
 80002e6:	402a      	ands	r2, r5
 80002e8:	2a04      	cmp	r2, #4
 80002ea:	d000      	beq.n	80002ee <__aeabi_fdiv+0xa2>
 80002ec:	3504      	adds	r5, #4
 80002ee:	012a      	lsls	r2, r5, #4
 80002f0:	d503      	bpl.n	80002fa <__aeabi_fdiv+0xae>
 80002f2:	0030      	movs	r0, r6
 80002f4:	4a5c      	ldr	r2, [pc, #368]	; (8000468 <__aeabi_fdiv+0x21c>)
 80002f6:	3080      	adds	r0, #128	; 0x80
 80002f8:	4015      	ands	r5, r2
 80002fa:	28fe      	cmp	r0, #254	; 0xfe
 80002fc:	dc03      	bgt.n	8000306 <__aeabi_fdiv+0xba>
 80002fe:	01ac      	lsls	r4, r5, #6
 8000300:	0a64      	lsrs	r4, r4, #9
 8000302:	b2c2      	uxtb	r2, r0
 8000304:	e001      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000306:	22ff      	movs	r2, #255	; 0xff
 8000308:	2400      	movs	r4, #0
 800030a:	0264      	lsls	r4, r4, #9
 800030c:	05d2      	lsls	r2, r2, #23
 800030e:	0a60      	lsrs	r0, r4, #9
 8000310:	07db      	lsls	r3, r3, #31
 8000312:	4310      	orrs	r0, r2
 8000314:	4318      	orrs	r0, r3
 8000316:	bc3c      	pop	{r2, r3, r4, r5}
 8000318:	4690      	mov	r8, r2
 800031a:	4699      	mov	r9, r3
 800031c:	46a2      	mov	sl, r4
 800031e:	46ab      	mov	fp, r5
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	2201      	movs	r2, #1
 8000324:	1a10      	subs	r0, r2, r0
 8000326:	281b      	cmp	r0, #27
 8000328:	dd7c      	ble.n	8000424 <__aeabi_fdiv+0x1d8>
 800032a:	2200      	movs	r2, #0
 800032c:	2400      	movs	r4, #0
 800032e:	e7ec      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000330:	2c00      	cmp	r4, #0
 8000332:	d11d      	bne.n	8000370 <__aeabi_fdiv+0x124>
 8000334:	2304      	movs	r3, #4
 8000336:	4699      	mov	r9, r3
 8000338:	3b03      	subs	r3, #3
 800033a:	2600      	movs	r6, #0
 800033c:	469b      	mov	fp, r3
 800033e:	e79d      	b.n	800027c <__aeabi_fdiv+0x30>
 8000340:	3eff      	subs	r6, #255	; 0xff
 8000342:	2d00      	cmp	r5, #0
 8000344:	d120      	bne.n	8000388 <__aeabi_fdiv+0x13c>
 8000346:	2102      	movs	r1, #2
 8000348:	4643      	mov	r3, r8
 800034a:	464a      	mov	r2, r9
 800034c:	407b      	eors	r3, r7
 800034e:	430a      	orrs	r2, r1
 8000350:	2a0f      	cmp	r2, #15
 8000352:	d8d8      	bhi.n	8000306 <__aeabi_fdiv+0xba>
 8000354:	4845      	ldr	r0, [pc, #276]	; (800046c <__aeabi_fdiv+0x220>)
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	5882      	ldr	r2, [r0, r2]
 800035a:	4697      	mov	pc, r2
 800035c:	2d00      	cmp	r5, #0
 800035e:	d119      	bne.n	8000394 <__aeabi_fdiv+0x148>
 8000360:	2101      	movs	r1, #1
 8000362:	e7f1      	b.n	8000348 <__aeabi_fdiv+0xfc>
 8000364:	230c      	movs	r3, #12
 8000366:	4699      	mov	r9, r3
 8000368:	3b09      	subs	r3, #9
 800036a:	26ff      	movs	r6, #255	; 0xff
 800036c:	469b      	mov	fp, r3
 800036e:	e785      	b.n	800027c <__aeabi_fdiv+0x30>
 8000370:	0020      	movs	r0, r4
 8000372:	f000 fc0d 	bl	8000b90 <__clzsi2>
 8000376:	2676      	movs	r6, #118	; 0x76
 8000378:	1f43      	subs	r3, r0, #5
 800037a:	409c      	lsls	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	4276      	negs	r6, r6
 8000380:	1a36      	subs	r6, r6, r0
 8000382:	4699      	mov	r9, r3
 8000384:	469b      	mov	fp, r3
 8000386:	e779      	b.n	800027c <__aeabi_fdiv+0x30>
 8000388:	464a      	mov	r2, r9
 800038a:	2303      	movs	r3, #3
 800038c:	431a      	orrs	r2, r3
 800038e:	4691      	mov	r9, r2
 8000390:	2103      	movs	r1, #3
 8000392:	e786      	b.n	80002a2 <__aeabi_fdiv+0x56>
 8000394:	0028      	movs	r0, r5
 8000396:	f000 fbfb 	bl	8000b90 <__clzsi2>
 800039a:	1f43      	subs	r3, r0, #5
 800039c:	1836      	adds	r6, r6, r0
 800039e:	409d      	lsls	r5, r3
 80003a0:	3676      	adds	r6, #118	; 0x76
 80003a2:	2100      	movs	r1, #0
 80003a4:	e77d      	b.n	80002a2 <__aeabi_fdiv+0x56>
 80003a6:	2480      	movs	r4, #128	; 0x80
 80003a8:	2300      	movs	r3, #0
 80003aa:	03e4      	lsls	r4, r4, #15
 80003ac:	22ff      	movs	r2, #255	; 0xff
 80003ae:	e7ac      	b.n	800030a <__aeabi_fdiv+0xbe>
 80003b0:	2500      	movs	r5, #0
 80003b2:	2380      	movs	r3, #128	; 0x80
 80003b4:	03db      	lsls	r3, r3, #15
 80003b6:	421c      	tst	r4, r3
 80003b8:	d028      	beq.n	800040c <__aeabi_fdiv+0x1c0>
 80003ba:	421d      	tst	r5, r3
 80003bc:	d126      	bne.n	800040c <__aeabi_fdiv+0x1c0>
 80003be:	432b      	orrs	r3, r5
 80003c0:	025c      	lsls	r4, r3, #9
 80003c2:	0a64      	lsrs	r4, r4, #9
 80003c4:	4643      	mov	r3, r8
 80003c6:	22ff      	movs	r2, #255	; 0xff
 80003c8:	e79f      	b.n	800030a <__aeabi_fdiv+0xbe>
 80003ca:	0162      	lsls	r2, r4, #5
 80003cc:	016c      	lsls	r4, r5, #5
 80003ce:	42a2      	cmp	r2, r4
 80003d0:	d224      	bcs.n	800041c <__aeabi_fdiv+0x1d0>
 80003d2:	211b      	movs	r1, #27
 80003d4:	2500      	movs	r5, #0
 80003d6:	3e01      	subs	r6, #1
 80003d8:	2701      	movs	r7, #1
 80003da:	0010      	movs	r0, r2
 80003dc:	006d      	lsls	r5, r5, #1
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	2800      	cmp	r0, #0
 80003e2:	db01      	blt.n	80003e8 <__aeabi_fdiv+0x19c>
 80003e4:	4294      	cmp	r4, r2
 80003e6:	d801      	bhi.n	80003ec <__aeabi_fdiv+0x1a0>
 80003e8:	1b12      	subs	r2, r2, r4
 80003ea:	433d      	orrs	r5, r7
 80003ec:	3901      	subs	r1, #1
 80003ee:	2900      	cmp	r1, #0
 80003f0:	d1f3      	bne.n	80003da <__aeabi_fdiv+0x18e>
 80003f2:	0014      	movs	r4, r2
 80003f4:	1e62      	subs	r2, r4, #1
 80003f6:	4194      	sbcs	r4, r2
 80003f8:	4325      	orrs	r5, r4
 80003fa:	e76d      	b.n	80002d8 <__aeabi_fdiv+0x8c>
 80003fc:	46ba      	mov	sl, r7
 80003fe:	4659      	mov	r1, fp
 8000400:	0025      	movs	r5, r4
 8000402:	4653      	mov	r3, sl
 8000404:	2902      	cmp	r1, #2
 8000406:	d000      	beq.n	800040a <__aeabi_fdiv+0x1be>
 8000408:	e761      	b.n	80002ce <__aeabi_fdiv+0x82>
 800040a:	e77c      	b.n	8000306 <__aeabi_fdiv+0xba>
 800040c:	2380      	movs	r3, #128	; 0x80
 800040e:	03db      	lsls	r3, r3, #15
 8000410:	431c      	orrs	r4, r3
 8000412:	0264      	lsls	r4, r4, #9
 8000414:	0a64      	lsrs	r4, r4, #9
 8000416:	003b      	movs	r3, r7
 8000418:	22ff      	movs	r2, #255	; 0xff
 800041a:	e776      	b.n	800030a <__aeabi_fdiv+0xbe>
 800041c:	1b12      	subs	r2, r2, r4
 800041e:	211a      	movs	r1, #26
 8000420:	2501      	movs	r5, #1
 8000422:	e7d9      	b.n	80003d8 <__aeabi_fdiv+0x18c>
 8000424:	369e      	adds	r6, #158	; 0x9e
 8000426:	002a      	movs	r2, r5
 8000428:	40b5      	lsls	r5, r6
 800042a:	002c      	movs	r4, r5
 800042c:	40c2      	lsrs	r2, r0
 800042e:	1e65      	subs	r5, r4, #1
 8000430:	41ac      	sbcs	r4, r5
 8000432:	4314      	orrs	r4, r2
 8000434:	0762      	lsls	r2, r4, #29
 8000436:	d004      	beq.n	8000442 <__aeabi_fdiv+0x1f6>
 8000438:	220f      	movs	r2, #15
 800043a:	4022      	ands	r2, r4
 800043c:	2a04      	cmp	r2, #4
 800043e:	d000      	beq.n	8000442 <__aeabi_fdiv+0x1f6>
 8000440:	3404      	adds	r4, #4
 8000442:	0162      	lsls	r2, r4, #5
 8000444:	d403      	bmi.n	800044e <__aeabi_fdiv+0x202>
 8000446:	01a4      	lsls	r4, r4, #6
 8000448:	0a64      	lsrs	r4, r4, #9
 800044a:	2200      	movs	r2, #0
 800044c:	e75d      	b.n	800030a <__aeabi_fdiv+0xbe>
 800044e:	2201      	movs	r2, #1
 8000450:	2400      	movs	r4, #0
 8000452:	e75a      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000454:	2480      	movs	r4, #128	; 0x80
 8000456:	03e4      	lsls	r4, r4, #15
 8000458:	432c      	orrs	r4, r5
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	e753      	b.n	800030a <__aeabi_fdiv+0xbe>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	080028c8 	.word	0x080028c8
 8000468:	f7ffffff 	.word	0xf7ffffff
 800046c:	08002908 	.word	0x08002908

08000470 <__aeabi_fmul>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464e      	mov	r6, r9
 8000474:	4657      	mov	r7, sl
 8000476:	4645      	mov	r5, r8
 8000478:	46de      	mov	lr, fp
 800047a:	b5e0      	push	{r5, r6, r7, lr}
 800047c:	0243      	lsls	r3, r0, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	0045      	lsls	r5, r0, #1
 8000482:	b083      	sub	sp, #12
 8000484:	1c0f      	adds	r7, r1, #0
 8000486:	4699      	mov	r9, r3
 8000488:	0e2d      	lsrs	r5, r5, #24
 800048a:	0fc6      	lsrs	r6, r0, #31
 800048c:	2d00      	cmp	r5, #0
 800048e:	d057      	beq.n	8000540 <__aeabi_fmul+0xd0>
 8000490:	2dff      	cmp	r5, #255	; 0xff
 8000492:	d024      	beq.n	80004de <__aeabi_fmul+0x6e>
 8000494:	2080      	movs	r0, #128	; 0x80
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	04c0      	lsls	r0, r0, #19
 800049a:	4318      	orrs	r0, r3
 800049c:	2300      	movs	r3, #0
 800049e:	4681      	mov	r9, r0
 80004a0:	469a      	mov	sl, r3
 80004a2:	469b      	mov	fp, r3
 80004a4:	3d7f      	subs	r5, #127	; 0x7f
 80004a6:	027c      	lsls	r4, r7, #9
 80004a8:	007a      	lsls	r2, r7, #1
 80004aa:	0ffb      	lsrs	r3, r7, #31
 80004ac:	0a64      	lsrs	r4, r4, #9
 80004ae:	0e12      	lsrs	r2, r2, #24
 80004b0:	4698      	mov	r8, r3
 80004b2:	d023      	beq.n	80004fc <__aeabi_fmul+0x8c>
 80004b4:	2aff      	cmp	r2, #255	; 0xff
 80004b6:	d04b      	beq.n	8000550 <__aeabi_fmul+0xe0>
 80004b8:	00e3      	lsls	r3, r4, #3
 80004ba:	2480      	movs	r4, #128	; 0x80
 80004bc:	2000      	movs	r0, #0
 80004be:	04e4      	lsls	r4, r4, #19
 80004c0:	3a7f      	subs	r2, #127	; 0x7f
 80004c2:	431c      	orrs	r4, r3
 80004c4:	18ad      	adds	r5, r5, r2
 80004c6:	1c6b      	adds	r3, r5, #1
 80004c8:	4647      	mov	r7, r8
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	4653      	mov	r3, sl
 80004ce:	4077      	eors	r7, r6
 80004d0:	003a      	movs	r2, r7
 80004d2:	2b0f      	cmp	r3, #15
 80004d4:	d848      	bhi.n	8000568 <__aeabi_fmul+0xf8>
 80004d6:	497d      	ldr	r1, [pc, #500]	; (80006cc <__aeabi_fmul+0x25c>)
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	58cb      	ldr	r3, [r1, r3]
 80004dc:	469f      	mov	pc, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d000      	beq.n	80004e4 <__aeabi_fmul+0x74>
 80004e2:	e085      	b.n	80005f0 <__aeabi_fmul+0x180>
 80004e4:	3308      	adds	r3, #8
 80004e6:	469a      	mov	sl, r3
 80004e8:	3b06      	subs	r3, #6
 80004ea:	469b      	mov	fp, r3
 80004ec:	027c      	lsls	r4, r7, #9
 80004ee:	007a      	lsls	r2, r7, #1
 80004f0:	0ffb      	lsrs	r3, r7, #31
 80004f2:	25ff      	movs	r5, #255	; 0xff
 80004f4:	0a64      	lsrs	r4, r4, #9
 80004f6:	0e12      	lsrs	r2, r2, #24
 80004f8:	4698      	mov	r8, r3
 80004fa:	d1db      	bne.n	80004b4 <__aeabi_fmul+0x44>
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x92>
 8000500:	e090      	b.n	8000624 <__aeabi_fmul+0x1b4>
 8000502:	4652      	mov	r2, sl
 8000504:	2301      	movs	r3, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4692      	mov	sl, r2
 800050a:	2001      	movs	r0, #1
 800050c:	e7db      	b.n	80004c6 <__aeabi_fmul+0x56>
 800050e:	464c      	mov	r4, r9
 8000510:	4658      	mov	r0, fp
 8000512:	0017      	movs	r7, r2
 8000514:	2802      	cmp	r0, #2
 8000516:	d024      	beq.n	8000562 <__aeabi_fmul+0xf2>
 8000518:	2803      	cmp	r0, #3
 800051a:	d100      	bne.n	800051e <__aeabi_fmul+0xae>
 800051c:	e0cf      	b.n	80006be <__aeabi_fmul+0x24e>
 800051e:	2200      	movs	r2, #0
 8000520:	2300      	movs	r3, #0
 8000522:	2801      	cmp	r0, #1
 8000524:	d14d      	bne.n	80005c2 <__aeabi_fmul+0x152>
 8000526:	0258      	lsls	r0, r3, #9
 8000528:	05d2      	lsls	r2, r2, #23
 800052a:	0a40      	lsrs	r0, r0, #9
 800052c:	07ff      	lsls	r7, r7, #31
 800052e:	4310      	orrs	r0, r2
 8000530:	4338      	orrs	r0, r7
 8000532:	b003      	add	sp, #12
 8000534:	bc3c      	pop	{r2, r3, r4, r5}
 8000536:	4690      	mov	r8, r2
 8000538:	4699      	mov	r9, r3
 800053a:	46a2      	mov	sl, r4
 800053c:	46ab      	mov	fp, r5
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	2b00      	cmp	r3, #0
 8000542:	d15b      	bne.n	80005fc <__aeabi_fmul+0x18c>
 8000544:	2304      	movs	r3, #4
 8000546:	469a      	mov	sl, r3
 8000548:	3b03      	subs	r3, #3
 800054a:	2500      	movs	r5, #0
 800054c:	469b      	mov	fp, r3
 800054e:	e7aa      	b.n	80004a6 <__aeabi_fmul+0x36>
 8000550:	35ff      	adds	r5, #255	; 0xff
 8000552:	2c00      	cmp	r4, #0
 8000554:	d160      	bne.n	8000618 <__aeabi_fmul+0x1a8>
 8000556:	4652      	mov	r2, sl
 8000558:	2302      	movs	r3, #2
 800055a:	431a      	orrs	r2, r3
 800055c:	4692      	mov	sl, r2
 800055e:	2002      	movs	r0, #2
 8000560:	e7b1      	b.n	80004c6 <__aeabi_fmul+0x56>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2300      	movs	r3, #0
 8000566:	e7de      	b.n	8000526 <__aeabi_fmul+0xb6>
 8000568:	464b      	mov	r3, r9
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	469c      	mov	ip, r3
 800056e:	464b      	mov	r3, r9
 8000570:	0426      	lsls	r6, r4, #16
 8000572:	0c36      	lsrs	r6, r6, #16
 8000574:	0418      	lsls	r0, r3, #16
 8000576:	4661      	mov	r1, ip
 8000578:	0033      	movs	r3, r6
 800057a:	0c22      	lsrs	r2, r4, #16
 800057c:	4664      	mov	r4, ip
 800057e:	0c00      	lsrs	r0, r0, #16
 8000580:	4343      	muls	r3, r0
 8000582:	434e      	muls	r6, r1
 8000584:	4350      	muls	r0, r2
 8000586:	4354      	muls	r4, r2
 8000588:	1980      	adds	r0, r0, r6
 800058a:	0c1a      	lsrs	r2, r3, #16
 800058c:	1812      	adds	r2, r2, r0
 800058e:	4296      	cmp	r6, r2
 8000590:	d903      	bls.n	800059a <__aeabi_fmul+0x12a>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0249      	lsls	r1, r1, #9
 8000596:	468c      	mov	ip, r1
 8000598:	4464      	add	r4, ip
 800059a:	041b      	lsls	r3, r3, #16
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	0410      	lsls	r0, r2, #16
 80005a0:	18c0      	adds	r0, r0, r3
 80005a2:	0183      	lsls	r3, r0, #6
 80005a4:	1e5e      	subs	r6, r3, #1
 80005a6:	41b3      	sbcs	r3, r6
 80005a8:	0e80      	lsrs	r0, r0, #26
 80005aa:	4318      	orrs	r0, r3
 80005ac:	0c13      	lsrs	r3, r2, #16
 80005ae:	191b      	adds	r3, r3, r4
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	4303      	orrs	r3, r0
 80005b4:	001c      	movs	r4, r3
 80005b6:	0123      	lsls	r3, r4, #4
 80005b8:	d579      	bpl.n	80006ae <__aeabi_fmul+0x23e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	0862      	lsrs	r2, r4, #1
 80005be:	401c      	ands	r4, r3
 80005c0:	4314      	orrs	r4, r2
 80005c2:	9a01      	ldr	r2, [sp, #4]
 80005c4:	327f      	adds	r2, #127	; 0x7f
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	dd4d      	ble.n	8000666 <__aeabi_fmul+0x1f6>
 80005ca:	0763      	lsls	r3, r4, #29
 80005cc:	d004      	beq.n	80005d8 <__aeabi_fmul+0x168>
 80005ce:	230f      	movs	r3, #15
 80005d0:	4023      	ands	r3, r4
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d000      	beq.n	80005d8 <__aeabi_fmul+0x168>
 80005d6:	3404      	adds	r4, #4
 80005d8:	0123      	lsls	r3, r4, #4
 80005da:	d503      	bpl.n	80005e4 <__aeabi_fmul+0x174>
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <__aeabi_fmul+0x260>)
 80005de:	9a01      	ldr	r2, [sp, #4]
 80005e0:	401c      	ands	r4, r3
 80005e2:	3280      	adds	r2, #128	; 0x80
 80005e4:	2afe      	cmp	r2, #254	; 0xfe
 80005e6:	dcbc      	bgt.n	8000562 <__aeabi_fmul+0xf2>
 80005e8:	01a3      	lsls	r3, r4, #6
 80005ea:	0a5b      	lsrs	r3, r3, #9
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	e79a      	b.n	8000526 <__aeabi_fmul+0xb6>
 80005f0:	230c      	movs	r3, #12
 80005f2:	469a      	mov	sl, r3
 80005f4:	3b09      	subs	r3, #9
 80005f6:	25ff      	movs	r5, #255	; 0xff
 80005f8:	469b      	mov	fp, r3
 80005fa:	e754      	b.n	80004a6 <__aeabi_fmul+0x36>
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fac7 	bl	8000b90 <__clzsi2>
 8000602:	464a      	mov	r2, r9
 8000604:	1f43      	subs	r3, r0, #5
 8000606:	2576      	movs	r5, #118	; 0x76
 8000608:	409a      	lsls	r2, r3
 800060a:	2300      	movs	r3, #0
 800060c:	426d      	negs	r5, r5
 800060e:	4691      	mov	r9, r2
 8000610:	1a2d      	subs	r5, r5, r0
 8000612:	469a      	mov	sl, r3
 8000614:	469b      	mov	fp, r3
 8000616:	e746      	b.n	80004a6 <__aeabi_fmul+0x36>
 8000618:	4652      	mov	r2, sl
 800061a:	2303      	movs	r3, #3
 800061c:	431a      	orrs	r2, r3
 800061e:	4692      	mov	sl, r2
 8000620:	2003      	movs	r0, #3
 8000622:	e750      	b.n	80004c6 <__aeabi_fmul+0x56>
 8000624:	0020      	movs	r0, r4
 8000626:	f000 fab3 	bl	8000b90 <__clzsi2>
 800062a:	1f43      	subs	r3, r0, #5
 800062c:	1a2d      	subs	r5, r5, r0
 800062e:	409c      	lsls	r4, r3
 8000630:	3d76      	subs	r5, #118	; 0x76
 8000632:	2000      	movs	r0, #0
 8000634:	e747      	b.n	80004c6 <__aeabi_fmul+0x56>
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	2700      	movs	r7, #0
 800063a:	03db      	lsls	r3, r3, #15
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	e772      	b.n	8000526 <__aeabi_fmul+0xb6>
 8000640:	4642      	mov	r2, r8
 8000642:	e766      	b.n	8000512 <__aeabi_fmul+0xa2>
 8000644:	464c      	mov	r4, r9
 8000646:	0032      	movs	r2, r6
 8000648:	4658      	mov	r0, fp
 800064a:	e762      	b.n	8000512 <__aeabi_fmul+0xa2>
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	464a      	mov	r2, r9
 8000650:	03db      	lsls	r3, r3, #15
 8000652:	421a      	tst	r2, r3
 8000654:	d022      	beq.n	800069c <__aeabi_fmul+0x22c>
 8000656:	421c      	tst	r4, r3
 8000658:	d120      	bne.n	800069c <__aeabi_fmul+0x22c>
 800065a:	4323      	orrs	r3, r4
 800065c:	025b      	lsls	r3, r3, #9
 800065e:	0a5b      	lsrs	r3, r3, #9
 8000660:	4647      	mov	r7, r8
 8000662:	22ff      	movs	r2, #255	; 0xff
 8000664:	e75f      	b.n	8000526 <__aeabi_fmul+0xb6>
 8000666:	2301      	movs	r3, #1
 8000668:	1a9a      	subs	r2, r3, r2
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc21      	bgt.n	80006b2 <__aeabi_fmul+0x242>
 800066e:	0023      	movs	r3, r4
 8000670:	9901      	ldr	r1, [sp, #4]
 8000672:	40d3      	lsrs	r3, r2
 8000674:	319e      	adds	r1, #158	; 0x9e
 8000676:	408c      	lsls	r4, r1
 8000678:	001a      	movs	r2, r3
 800067a:	0023      	movs	r3, r4
 800067c:	1e5c      	subs	r4, r3, #1
 800067e:	41a3      	sbcs	r3, r4
 8000680:	4313      	orrs	r3, r2
 8000682:	075a      	lsls	r2, r3, #29
 8000684:	d004      	beq.n	8000690 <__aeabi_fmul+0x220>
 8000686:	220f      	movs	r2, #15
 8000688:	401a      	ands	r2, r3
 800068a:	2a04      	cmp	r2, #4
 800068c:	d000      	beq.n	8000690 <__aeabi_fmul+0x220>
 800068e:	3304      	adds	r3, #4
 8000690:	015a      	lsls	r2, r3, #5
 8000692:	d411      	bmi.n	80006b8 <__aeabi_fmul+0x248>
 8000694:	019b      	lsls	r3, r3, #6
 8000696:	0a5b      	lsrs	r3, r3, #9
 8000698:	2200      	movs	r2, #0
 800069a:	e744      	b.n	8000526 <__aeabi_fmul+0xb6>
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	464a      	mov	r2, r9
 80006a0:	03db      	lsls	r3, r3, #15
 80006a2:	4313      	orrs	r3, r2
 80006a4:	025b      	lsls	r3, r3, #9
 80006a6:	0a5b      	lsrs	r3, r3, #9
 80006a8:	0037      	movs	r7, r6
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	e73b      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006ae:	9501      	str	r5, [sp, #4]
 80006b0:	e787      	b.n	80005c2 <__aeabi_fmul+0x152>
 80006b2:	2200      	movs	r2, #0
 80006b4:	2300      	movs	r3, #0
 80006b6:	e736      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006b8:	2201      	movs	r2, #1
 80006ba:	2300      	movs	r3, #0
 80006bc:	e733      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	03db      	lsls	r3, r3, #15
 80006c2:	4323      	orrs	r3, r4
 80006c4:	025b      	lsls	r3, r3, #9
 80006c6:	0a5b      	lsrs	r3, r3, #9
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	e72c      	b.n	8000526 <__aeabi_fmul+0xb6>
 80006cc:	08002948 	.word	0x08002948
 80006d0:	f7ffffff 	.word	0xf7ffffff

080006d4 <__aeabi_fsub>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	4647      	mov	r7, r8
 80006d8:	46ce      	mov	lr, r9
 80006da:	0044      	lsls	r4, r0, #1
 80006dc:	0fc2      	lsrs	r2, r0, #31
 80006de:	b580      	push	{r7, lr}
 80006e0:	0247      	lsls	r7, r0, #9
 80006e2:	0248      	lsls	r0, r1, #9
 80006e4:	0a40      	lsrs	r0, r0, #9
 80006e6:	4684      	mov	ip, r0
 80006e8:	4666      	mov	r6, ip
 80006ea:	0048      	lsls	r0, r1, #1
 80006ec:	0a7f      	lsrs	r7, r7, #9
 80006ee:	0e24      	lsrs	r4, r4, #24
 80006f0:	00f6      	lsls	r6, r6, #3
 80006f2:	0025      	movs	r5, r4
 80006f4:	4690      	mov	r8, r2
 80006f6:	00fb      	lsls	r3, r7, #3
 80006f8:	0e00      	lsrs	r0, r0, #24
 80006fa:	0fc9      	lsrs	r1, r1, #31
 80006fc:	46b1      	mov	r9, r6
 80006fe:	28ff      	cmp	r0, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0x30>
 8000702:	e085      	b.n	8000810 <__aeabi_fsub+0x13c>
 8000704:	2601      	movs	r6, #1
 8000706:	4071      	eors	r1, r6
 8000708:	1a26      	subs	r6, r4, r0
 800070a:	4291      	cmp	r1, r2
 800070c:	d057      	beq.n	80007be <__aeabi_fsub+0xea>
 800070e:	2e00      	cmp	r6, #0
 8000710:	dd43      	ble.n	800079a <__aeabi_fsub+0xc6>
 8000712:	2800      	cmp	r0, #0
 8000714:	d000      	beq.n	8000718 <__aeabi_fsub+0x44>
 8000716:	e07f      	b.n	8000818 <__aeabi_fsub+0x144>
 8000718:	4649      	mov	r1, r9
 800071a:	2900      	cmp	r1, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0x4c>
 800071e:	e0aa      	b.n	8000876 <__aeabi_fsub+0x1a2>
 8000720:	3e01      	subs	r6, #1
 8000722:	2e00      	cmp	r6, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fsub+0x54>
 8000726:	e0f7      	b.n	8000918 <__aeabi_fsub+0x244>
 8000728:	1a5b      	subs	r3, r3, r1
 800072a:	015a      	lsls	r2, r3, #5
 800072c:	d400      	bmi.n	8000730 <__aeabi_fsub+0x5c>
 800072e:	e08b      	b.n	8000848 <__aeabi_fsub+0x174>
 8000730:	019b      	lsls	r3, r3, #6
 8000732:	099c      	lsrs	r4, r3, #6
 8000734:	0020      	movs	r0, r4
 8000736:	f000 fa2b 	bl	8000b90 <__clzsi2>
 800073a:	3805      	subs	r0, #5
 800073c:	4084      	lsls	r4, r0
 800073e:	4285      	cmp	r5, r0
 8000740:	dd00      	ble.n	8000744 <__aeabi_fsub+0x70>
 8000742:	e0d3      	b.n	80008ec <__aeabi_fsub+0x218>
 8000744:	1b45      	subs	r5, r0, r5
 8000746:	0023      	movs	r3, r4
 8000748:	2020      	movs	r0, #32
 800074a:	3501      	adds	r5, #1
 800074c:	40eb      	lsrs	r3, r5
 800074e:	1b45      	subs	r5, r0, r5
 8000750:	40ac      	lsls	r4, r5
 8000752:	1e62      	subs	r2, r4, #1
 8000754:	4194      	sbcs	r4, r2
 8000756:	4323      	orrs	r3, r4
 8000758:	2407      	movs	r4, #7
 800075a:	2500      	movs	r5, #0
 800075c:	401c      	ands	r4, r3
 800075e:	2201      	movs	r2, #1
 8000760:	4641      	mov	r1, r8
 8000762:	400a      	ands	r2, r1
 8000764:	2c00      	cmp	r4, #0
 8000766:	d004      	beq.n	8000772 <__aeabi_fsub+0x9e>
 8000768:	210f      	movs	r1, #15
 800076a:	4019      	ands	r1, r3
 800076c:	2904      	cmp	r1, #4
 800076e:	d000      	beq.n	8000772 <__aeabi_fsub+0x9e>
 8000770:	3304      	adds	r3, #4
 8000772:	0159      	lsls	r1, r3, #5
 8000774:	d400      	bmi.n	8000778 <__aeabi_fsub+0xa4>
 8000776:	e080      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000778:	3501      	adds	r5, #1
 800077a:	b2ec      	uxtb	r4, r5
 800077c:	2dff      	cmp	r5, #255	; 0xff
 800077e:	d000      	beq.n	8000782 <__aeabi_fsub+0xae>
 8000780:	e0a3      	b.n	80008ca <__aeabi_fsub+0x1f6>
 8000782:	24ff      	movs	r4, #255	; 0xff
 8000784:	2300      	movs	r3, #0
 8000786:	025b      	lsls	r3, r3, #9
 8000788:	05e4      	lsls	r4, r4, #23
 800078a:	0a58      	lsrs	r0, r3, #9
 800078c:	07d2      	lsls	r2, r2, #31
 800078e:	4320      	orrs	r0, r4
 8000790:	4310      	orrs	r0, r2
 8000792:	bc0c      	pop	{r2, r3}
 8000794:	4690      	mov	r8, r2
 8000796:	4699      	mov	r9, r3
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800079a:	2e00      	cmp	r6, #0
 800079c:	d174      	bne.n	8000888 <__aeabi_fsub+0x1b4>
 800079e:	1c60      	adds	r0, r4, #1
 80007a0:	b2c0      	uxtb	r0, r0
 80007a2:	2801      	cmp	r0, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_fsub+0xd4>
 80007a6:	e0a7      	b.n	80008f8 <__aeabi_fsub+0x224>
 80007a8:	464a      	mov	r2, r9
 80007aa:	1a9c      	subs	r4, r3, r2
 80007ac:	0162      	lsls	r2, r4, #5
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_fsub+0xde>
 80007b0:	e0b6      	b.n	8000920 <__aeabi_fsub+0x24c>
 80007b2:	2c00      	cmp	r4, #0
 80007b4:	d1be      	bne.n	8000734 <__aeabi_fsub+0x60>
 80007b6:	2200      	movs	r2, #0
 80007b8:	2400      	movs	r4, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	e7e3      	b.n	8000786 <__aeabi_fsub+0xb2>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fsub+0xf0>
 80007c2:	e085      	b.n	80008d0 <__aeabi_fsub+0x1fc>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d046      	beq.n	8000856 <__aeabi_fsub+0x182>
 80007c8:	2cff      	cmp	r4, #255	; 0xff
 80007ca:	d049      	beq.n	8000860 <__aeabi_fsub+0x18c>
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	4648      	mov	r0, r9
 80007d0:	04d2      	lsls	r2, r2, #19
 80007d2:	4310      	orrs	r0, r2
 80007d4:	4681      	mov	r9, r0
 80007d6:	2201      	movs	r2, #1
 80007d8:	2e1b      	cmp	r6, #27
 80007da:	dc09      	bgt.n	80007f0 <__aeabi_fsub+0x11c>
 80007dc:	2020      	movs	r0, #32
 80007de:	464c      	mov	r4, r9
 80007e0:	1b80      	subs	r0, r0, r6
 80007e2:	4084      	lsls	r4, r0
 80007e4:	464a      	mov	r2, r9
 80007e6:	0020      	movs	r0, r4
 80007e8:	40f2      	lsrs	r2, r6
 80007ea:	1e44      	subs	r4, r0, #1
 80007ec:	41a0      	sbcs	r0, r4
 80007ee:	4302      	orrs	r2, r0
 80007f0:	189b      	adds	r3, r3, r2
 80007f2:	015a      	lsls	r2, r3, #5
 80007f4:	d528      	bpl.n	8000848 <__aeabi_fsub+0x174>
 80007f6:	3501      	adds	r5, #1
 80007f8:	2dff      	cmp	r5, #255	; 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fsub+0x12a>
 80007fc:	e0a8      	b.n	8000950 <__aeabi_fsub+0x27c>
 80007fe:	2201      	movs	r2, #1
 8000800:	2407      	movs	r4, #7
 8000802:	4994      	ldr	r1, [pc, #592]	; (8000a54 <__aeabi_fsub+0x380>)
 8000804:	401a      	ands	r2, r3
 8000806:	085b      	lsrs	r3, r3, #1
 8000808:	400b      	ands	r3, r1
 800080a:	4313      	orrs	r3, r2
 800080c:	401c      	ands	r4, r3
 800080e:	e7a6      	b.n	800075e <__aeabi_fsub+0x8a>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x142>
 8000814:	e778      	b.n	8000708 <__aeabi_fsub+0x34>
 8000816:	e775      	b.n	8000704 <__aeabi_fsub+0x30>
 8000818:	2cff      	cmp	r4, #255	; 0xff
 800081a:	d054      	beq.n	80008c6 <__aeabi_fsub+0x1f2>
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	4649      	mov	r1, r9
 8000820:	04d2      	lsls	r2, r2, #19
 8000822:	4311      	orrs	r1, r2
 8000824:	4689      	mov	r9, r1
 8000826:	2201      	movs	r2, #1
 8000828:	2e1b      	cmp	r6, #27
 800082a:	dc09      	bgt.n	8000840 <__aeabi_fsub+0x16c>
 800082c:	2120      	movs	r1, #32
 800082e:	4648      	mov	r0, r9
 8000830:	1b89      	subs	r1, r1, r6
 8000832:	4088      	lsls	r0, r1
 8000834:	464a      	mov	r2, r9
 8000836:	0001      	movs	r1, r0
 8000838:	40f2      	lsrs	r2, r6
 800083a:	1e48      	subs	r0, r1, #1
 800083c:	4181      	sbcs	r1, r0
 800083e:	430a      	orrs	r2, r1
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	015a      	lsls	r2, r3, #5
 8000844:	d500      	bpl.n	8000848 <__aeabi_fsub+0x174>
 8000846:	e773      	b.n	8000730 <__aeabi_fsub+0x5c>
 8000848:	2201      	movs	r2, #1
 800084a:	4641      	mov	r1, r8
 800084c:	400a      	ands	r2, r1
 800084e:	0759      	lsls	r1, r3, #29
 8000850:	d000      	beq.n	8000854 <__aeabi_fsub+0x180>
 8000852:	e789      	b.n	8000768 <__aeabi_fsub+0x94>
 8000854:	e011      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000856:	4648      	mov	r0, r9
 8000858:	2800      	cmp	r0, #0
 800085a:	d158      	bne.n	800090e <__aeabi_fsub+0x23a>
 800085c:	2cff      	cmp	r4, #255	; 0xff
 800085e:	d10c      	bne.n	800087a <__aeabi_fsub+0x1a6>
 8000860:	08db      	lsrs	r3, r3, #3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x194>
 8000866:	e78c      	b.n	8000782 <__aeabi_fsub+0xae>
 8000868:	2080      	movs	r0, #128	; 0x80
 800086a:	03c0      	lsls	r0, r0, #15
 800086c:	4303      	orrs	r3, r0
 800086e:	025b      	lsls	r3, r3, #9
 8000870:	0a5b      	lsrs	r3, r3, #9
 8000872:	24ff      	movs	r4, #255	; 0xff
 8000874:	e787      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d025      	beq.n	80008c6 <__aeabi_fsub+0x1f2>
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	2dff      	cmp	r5, #255	; 0xff
 800087e:	d0f0      	beq.n	8000862 <__aeabi_fsub+0x18e>
 8000880:	025b      	lsls	r3, r3, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	b2ec      	uxtb	r4, r5
 8000886:	e77e      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000888:	2c00      	cmp	r4, #0
 800088a:	d04d      	beq.n	8000928 <__aeabi_fsub+0x254>
 800088c:	28ff      	cmp	r0, #255	; 0xff
 800088e:	d018      	beq.n	80008c2 <__aeabi_fsub+0x1ee>
 8000890:	2480      	movs	r4, #128	; 0x80
 8000892:	04e4      	lsls	r4, r4, #19
 8000894:	4272      	negs	r2, r6
 8000896:	4323      	orrs	r3, r4
 8000898:	2a1b      	cmp	r2, #27
 800089a:	dd00      	ble.n	800089e <__aeabi_fsub+0x1ca>
 800089c:	e0c4      	b.n	8000a28 <__aeabi_fsub+0x354>
 800089e:	001c      	movs	r4, r3
 80008a0:	2520      	movs	r5, #32
 80008a2:	40d4      	lsrs	r4, r2
 80008a4:	1aaa      	subs	r2, r5, r2
 80008a6:	4093      	lsls	r3, r2
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	4193      	sbcs	r3, r2
 80008ac:	4323      	orrs	r3, r4
 80008ae:	464a      	mov	r2, r9
 80008b0:	0005      	movs	r5, r0
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	4688      	mov	r8, r1
 80008b6:	e738      	b.n	800072a <__aeabi_fsub+0x56>
 80008b8:	1c72      	adds	r2, r6, #1
 80008ba:	d0f8      	beq.n	80008ae <__aeabi_fsub+0x1da>
 80008bc:	43f2      	mvns	r2, r6
 80008be:	28ff      	cmp	r0, #255	; 0xff
 80008c0:	d1ea      	bne.n	8000898 <__aeabi_fsub+0x1c4>
 80008c2:	000a      	movs	r2, r1
 80008c4:	464b      	mov	r3, r9
 80008c6:	25ff      	movs	r5, #255	; 0xff
 80008c8:	e7d7      	b.n	800087a <__aeabi_fsub+0x1a6>
 80008ca:	019b      	lsls	r3, r3, #6
 80008cc:	0a5b      	lsrs	r3, r3, #9
 80008ce:	e75a      	b.n	8000786 <__aeabi_fsub+0xb2>
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d141      	bne.n	8000958 <__aeabi_fsub+0x284>
 80008d4:	1c65      	adds	r5, r4, #1
 80008d6:	b2e9      	uxtb	r1, r5
 80008d8:	2901      	cmp	r1, #1
 80008da:	dd45      	ble.n	8000968 <__aeabi_fsub+0x294>
 80008dc:	2dff      	cmp	r5, #255	; 0xff
 80008de:	d100      	bne.n	80008e2 <__aeabi_fsub+0x20e>
 80008e0:	e74f      	b.n	8000782 <__aeabi_fsub+0xae>
 80008e2:	2407      	movs	r4, #7
 80008e4:	444b      	add	r3, r9
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	401c      	ands	r4, r3
 80008ea:	e738      	b.n	800075e <__aeabi_fsub+0x8a>
 80008ec:	2207      	movs	r2, #7
 80008ee:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <__aeabi_fsub+0x384>)
 80008f0:	1a2d      	subs	r5, r5, r0
 80008f2:	4023      	ands	r3, r4
 80008f4:	4014      	ands	r4, r2
 80008f6:	e732      	b.n	800075e <__aeabi_fsub+0x8a>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d11d      	bne.n	8000938 <__aeabi_fsub+0x264>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d17a      	bne.n	80009f6 <__aeabi_fsub+0x322>
 8000900:	464b      	mov	r3, r9
 8000902:	2b00      	cmp	r3, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fsub+0x234>
 8000906:	e091      	b.n	8000a2c <__aeabi_fsub+0x358>
 8000908:	000a      	movs	r2, r1
 800090a:	2500      	movs	r5, #0
 800090c:	e7b5      	b.n	800087a <__aeabi_fsub+0x1a6>
 800090e:	3e01      	subs	r6, #1
 8000910:	2e00      	cmp	r6, #0
 8000912:	d119      	bne.n	8000948 <__aeabi_fsub+0x274>
 8000914:	444b      	add	r3, r9
 8000916:	e76c      	b.n	80007f2 <__aeabi_fsub+0x11e>
 8000918:	2cff      	cmp	r4, #255	; 0xff
 800091a:	d184      	bne.n	8000826 <__aeabi_fsub+0x152>
 800091c:	25ff      	movs	r5, #255	; 0xff
 800091e:	e7ac      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000920:	464a      	mov	r2, r9
 8000922:	4688      	mov	r8, r1
 8000924:	1ad4      	subs	r4, r2, r3
 8000926:	e705      	b.n	8000734 <__aeabi_fsub+0x60>
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1c5      	bne.n	80008b8 <__aeabi_fsub+0x1e4>
 800092c:	000a      	movs	r2, r1
 800092e:	28ff      	cmp	r0, #255	; 0xff
 8000930:	d0c8      	beq.n	80008c4 <__aeabi_fsub+0x1f0>
 8000932:	0005      	movs	r5, r0
 8000934:	464b      	mov	r3, r9
 8000936:	e7a0      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000938:	2b00      	cmp	r3, #0
 800093a:	d149      	bne.n	80009d0 <__aeabi_fsub+0x2fc>
 800093c:	464b      	mov	r3, r9
 800093e:	2b00      	cmp	r3, #0
 8000940:	d077      	beq.n	8000a32 <__aeabi_fsub+0x35e>
 8000942:	000a      	movs	r2, r1
 8000944:	25ff      	movs	r5, #255	; 0xff
 8000946:	e798      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000948:	2cff      	cmp	r4, #255	; 0xff
 800094a:	d000      	beq.n	800094e <__aeabi_fsub+0x27a>
 800094c:	e743      	b.n	80007d6 <__aeabi_fsub+0x102>
 800094e:	e787      	b.n	8000860 <__aeabi_fsub+0x18c>
 8000950:	000a      	movs	r2, r1
 8000952:	24ff      	movs	r4, #255	; 0xff
 8000954:	2300      	movs	r3, #0
 8000956:	e716      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d115      	bne.n	8000988 <__aeabi_fsub+0x2b4>
 800095c:	2b00      	cmp	r3, #0
 800095e:	d157      	bne.n	8000a10 <__aeabi_fsub+0x33c>
 8000960:	28ff      	cmp	r0, #255	; 0xff
 8000962:	d1e6      	bne.n	8000932 <__aeabi_fsub+0x25e>
 8000964:	464b      	mov	r3, r9
 8000966:	e77b      	b.n	8000860 <__aeabi_fsub+0x18c>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d120      	bne.n	80009ae <__aeabi_fsub+0x2da>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d057      	beq.n	8000a20 <__aeabi_fsub+0x34c>
 8000970:	4649      	mov	r1, r9
 8000972:	2900      	cmp	r1, #0
 8000974:	d053      	beq.n	8000a1e <__aeabi_fsub+0x34a>
 8000976:	444b      	add	r3, r9
 8000978:	015a      	lsls	r2, r3, #5
 800097a:	d568      	bpl.n	8000a4e <__aeabi_fsub+0x37a>
 800097c:	2407      	movs	r4, #7
 800097e:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <__aeabi_fsub+0x384>)
 8000980:	401c      	ands	r4, r3
 8000982:	2501      	movs	r5, #1
 8000984:	4013      	ands	r3, r2
 8000986:	e6ea      	b.n	800075e <__aeabi_fsub+0x8a>
 8000988:	28ff      	cmp	r0, #255	; 0xff
 800098a:	d0eb      	beq.n	8000964 <__aeabi_fsub+0x290>
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	04d2      	lsls	r2, r2, #19
 8000990:	4276      	negs	r6, r6
 8000992:	4313      	orrs	r3, r2
 8000994:	2e1b      	cmp	r6, #27
 8000996:	dc53      	bgt.n	8000a40 <__aeabi_fsub+0x36c>
 8000998:	2520      	movs	r5, #32
 800099a:	1bad      	subs	r5, r5, r6
 800099c:	001a      	movs	r2, r3
 800099e:	40ab      	lsls	r3, r5
 80009a0:	40f2      	lsrs	r2, r6
 80009a2:	1e5c      	subs	r4, r3, #1
 80009a4:	41a3      	sbcs	r3, r4
 80009a6:	4313      	orrs	r3, r2
 80009a8:	444b      	add	r3, r9
 80009aa:	0005      	movs	r5, r0
 80009ac:	e721      	b.n	80007f2 <__aeabi_fsub+0x11e>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0d8      	beq.n	8000964 <__aeabi_fsub+0x290>
 80009b2:	4649      	mov	r1, r9
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x2e6>
 80009b8:	e752      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	03c9      	lsls	r1, r1, #15
 80009be:	420f      	tst	r7, r1
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fsub+0x2f0>
 80009c2:	e74d      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009c4:	4660      	mov	r0, ip
 80009c6:	4208      	tst	r0, r1
 80009c8:	d000      	beq.n	80009cc <__aeabi_fsub+0x2f8>
 80009ca:	e749      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009cc:	464b      	mov	r3, r9
 80009ce:	e747      	b.n	8000860 <__aeabi_fsub+0x18c>
 80009d0:	4648      	mov	r0, r9
 80009d2:	25ff      	movs	r5, #255	; 0xff
 80009d4:	2800      	cmp	r0, #0
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0x306>
 80009d8:	e74f      	b.n	800087a <__aeabi_fsub+0x1a6>
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	03d2      	lsls	r2, r2, #15
 80009de:	4217      	tst	r7, r2
 80009e0:	d004      	beq.n	80009ec <__aeabi_fsub+0x318>
 80009e2:	4660      	mov	r0, ip
 80009e4:	4210      	tst	r0, r2
 80009e6:	d101      	bne.n	80009ec <__aeabi_fsub+0x318>
 80009e8:	464b      	mov	r3, r9
 80009ea:	4688      	mov	r8, r1
 80009ec:	2201      	movs	r2, #1
 80009ee:	4641      	mov	r1, r8
 80009f0:	25ff      	movs	r5, #255	; 0xff
 80009f2:	400a      	ands	r2, r1
 80009f4:	e741      	b.n	800087a <__aeabi_fsub+0x1a6>
 80009f6:	4648      	mov	r0, r9
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d01f      	beq.n	8000a3c <__aeabi_fsub+0x368>
 80009fc:	1a1a      	subs	r2, r3, r0
 80009fe:	0150      	lsls	r0, r2, #5
 8000a00:	d520      	bpl.n	8000a44 <__aeabi_fsub+0x370>
 8000a02:	464a      	mov	r2, r9
 8000a04:	2407      	movs	r4, #7
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	401c      	ands	r4, r3
 8000a0a:	4688      	mov	r8, r1
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	e6a6      	b.n	800075e <__aeabi_fsub+0x8a>
 8000a10:	1c74      	adds	r4, r6, #1
 8000a12:	d0c9      	beq.n	80009a8 <__aeabi_fsub+0x2d4>
 8000a14:	43f6      	mvns	r6, r6
 8000a16:	28ff      	cmp	r0, #255	; 0xff
 8000a18:	d1bc      	bne.n	8000994 <__aeabi_fsub+0x2c0>
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	e720      	b.n	8000860 <__aeabi_fsub+0x18c>
 8000a1e:	4699      	mov	r9, r3
 8000a20:	464b      	mov	r3, r9
 8000a22:	2500      	movs	r5, #0
 8000a24:	08db      	lsrs	r3, r3, #3
 8000a26:	e72b      	b.n	8000880 <__aeabi_fsub+0x1ac>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e740      	b.n	80008ae <__aeabi_fsub+0x1da>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e6a9      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	2200      	movs	r2, #0
 8000a36:	03db      	lsls	r3, r3, #15
 8000a38:	24ff      	movs	r4, #255	; 0xff
 8000a3a:	e6a4      	b.n	8000786 <__aeabi_fsub+0xb2>
 8000a3c:	2500      	movs	r5, #0
 8000a3e:	e71c      	b.n	800087a <__aeabi_fsub+0x1a6>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e7b1      	b.n	80009a8 <__aeabi_fsub+0x2d4>
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	d0f1      	beq.n	8000a2c <__aeabi_fsub+0x358>
 8000a48:	0013      	movs	r3, r2
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	e6fc      	b.n	8000848 <__aeabi_fsub+0x174>
 8000a4e:	2500      	movs	r5, #0
 8000a50:	e6fa      	b.n	8000848 <__aeabi_fsub+0x174>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	7dffffff 	.word	0x7dffffff
 8000a58:	fbffffff 	.word	0xfbffffff

08000a5c <__aeabi_f2iz>:
 8000a5c:	0241      	lsls	r1, r0, #9
 8000a5e:	0042      	lsls	r2, r0, #1
 8000a60:	0fc3      	lsrs	r3, r0, #31
 8000a62:	0a49      	lsrs	r1, r1, #9
 8000a64:	0e12      	lsrs	r2, r2, #24
 8000a66:	2000      	movs	r0, #0
 8000a68:	2a7e      	cmp	r2, #126	; 0x7e
 8000a6a:	d90d      	bls.n	8000a88 <__aeabi_f2iz+0x2c>
 8000a6c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a6e:	d80c      	bhi.n	8000a8a <__aeabi_f2iz+0x2e>
 8000a70:	2080      	movs	r0, #128	; 0x80
 8000a72:	0400      	lsls	r0, r0, #16
 8000a74:	4301      	orrs	r1, r0
 8000a76:	2a95      	cmp	r2, #149	; 0x95
 8000a78:	dc0a      	bgt.n	8000a90 <__aeabi_f2iz+0x34>
 8000a7a:	2096      	movs	r0, #150	; 0x96
 8000a7c:	1a82      	subs	r2, r0, r2
 8000a7e:	40d1      	lsrs	r1, r2
 8000a80:	4248      	negs	r0, r1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_f2iz+0x2c>
 8000a86:	0008      	movs	r0, r1
 8000a88:	4770      	bx	lr
 8000a8a:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <__aeabi_f2iz+0x3c>)
 8000a8c:	1898      	adds	r0, r3, r2
 8000a8e:	e7fb      	b.n	8000a88 <__aeabi_f2iz+0x2c>
 8000a90:	3a96      	subs	r2, #150	; 0x96
 8000a92:	4091      	lsls	r1, r2
 8000a94:	e7f4      	b.n	8000a80 <__aeabi_f2iz+0x24>
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	7fffffff 	.word	0x7fffffff

08000a9c <__aeabi_ui2f>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	1e04      	subs	r4, r0, #0
 8000aa0:	d034      	beq.n	8000b0c <__aeabi_ui2f+0x70>
 8000aa2:	f000 f875 	bl	8000b90 <__clzsi2>
 8000aa6:	229e      	movs	r2, #158	; 0x9e
 8000aa8:	1a12      	subs	r2, r2, r0
 8000aaa:	2a96      	cmp	r2, #150	; 0x96
 8000aac:	dc07      	bgt.n	8000abe <__aeabi_ui2f+0x22>
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	2808      	cmp	r0, #8
 8000ab2:	dd2e      	ble.n	8000b12 <__aeabi_ui2f+0x76>
 8000ab4:	3808      	subs	r0, #8
 8000ab6:	4084      	lsls	r4, r0
 8000ab8:	0260      	lsls	r0, r4, #9
 8000aba:	0a40      	lsrs	r0, r0, #9
 8000abc:	e021      	b.n	8000b02 <__aeabi_ui2f+0x66>
 8000abe:	2a99      	cmp	r2, #153	; 0x99
 8000ac0:	dd09      	ble.n	8000ad6 <__aeabi_ui2f+0x3a>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	0021      	movs	r1, r4
 8000ac6:	331b      	adds	r3, #27
 8000ac8:	4099      	lsls	r1, r3
 8000aca:	1e4b      	subs	r3, r1, #1
 8000acc:	4199      	sbcs	r1, r3
 8000ace:	2305      	movs	r3, #5
 8000ad0:	1a1b      	subs	r3, r3, r0
 8000ad2:	40dc      	lsrs	r4, r3
 8000ad4:	430c      	orrs	r4, r1
 8000ad6:	2805      	cmp	r0, #5
 8000ad8:	dd01      	ble.n	8000ade <__aeabi_ui2f+0x42>
 8000ada:	1f43      	subs	r3, r0, #5
 8000adc:	409c      	lsls	r4, r3
 8000ade:	0023      	movs	r3, r4
 8000ae0:	490d      	ldr	r1, [pc, #52]	; (8000b18 <__aeabi_ui2f+0x7c>)
 8000ae2:	400b      	ands	r3, r1
 8000ae4:	0765      	lsls	r5, r4, #29
 8000ae6:	d009      	beq.n	8000afc <__aeabi_ui2f+0x60>
 8000ae8:	250f      	movs	r5, #15
 8000aea:	402c      	ands	r4, r5
 8000aec:	2c04      	cmp	r4, #4
 8000aee:	d005      	beq.n	8000afc <__aeabi_ui2f+0x60>
 8000af0:	3304      	adds	r3, #4
 8000af2:	015c      	lsls	r4, r3, #5
 8000af4:	d502      	bpl.n	8000afc <__aeabi_ui2f+0x60>
 8000af6:	229f      	movs	r2, #159	; 0x9f
 8000af8:	400b      	ands	r3, r1
 8000afa:	1a12      	subs	r2, r2, r0
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	0a58      	lsrs	r0, r3, #9
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	0240      	lsls	r0, r0, #9
 8000b04:	05d2      	lsls	r2, r2, #23
 8000b06:	0a40      	lsrs	r0, r0, #9
 8000b08:	4310      	orrs	r0, r2
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e7f7      	b.n	8000b02 <__aeabi_ui2f+0x66>
 8000b12:	0260      	lsls	r0, r4, #9
 8000b14:	0a40      	lsrs	r0, r0, #9
 8000b16:	e7f4      	b.n	8000b02 <__aeabi_ui2f+0x66>
 8000b18:	fbffffff 	.word	0xfbffffff

08000b1c <__aeabi_cfrcmple>:
 8000b1c:	4684      	mov	ip, r0
 8000b1e:	1c08      	adds	r0, r1, #0
 8000b20:	4661      	mov	r1, ip
 8000b22:	e7ff      	b.n	8000b24 <__aeabi_cfcmpeq>

08000b24 <__aeabi_cfcmpeq>:
 8000b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b26:	f000 f8c7 	bl	8000cb8 <__lesf2>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d401      	bmi.n	8000b32 <__aeabi_cfcmpeq+0xe>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	42c8      	cmn	r0, r1
 8000b32:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b34 <__aeabi_fcmpeq>:
 8000b34:	b510      	push	{r4, lr}
 8000b36:	f000 f849 	bl	8000bcc <__eqsf2>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	bd10      	pop	{r4, pc}

08000b40 <__aeabi_fcmplt>:
 8000b40:	b510      	push	{r4, lr}
 8000b42:	f000 f8b9 	bl	8000cb8 <__lesf2>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	db01      	blt.n	8000b4e <__aeabi_fcmplt+0xe>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	2001      	movs	r0, #1
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)

08000b54 <__aeabi_fcmple>:
 8000b54:	b510      	push	{r4, lr}
 8000b56:	f000 f8af 	bl	8000cb8 <__lesf2>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	dd01      	ble.n	8000b62 <__aeabi_fcmple+0xe>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
 8000b62:	2001      	movs	r0, #1
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)

08000b68 <__aeabi_fcmpgt>:
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	f000 f857 	bl	8000c1c <__gesf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	dc01      	bgt.n	8000b76 <__aeabi_fcmpgt+0xe>
 8000b72:	2000      	movs	r0, #0
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	2001      	movs	r0, #1
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <__aeabi_fcmpge>:
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	f000 f84d 	bl	8000c1c <__gesf2>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	da01      	bge.n	8000b8a <__aeabi_fcmpge+0xe>
 8000b86:	2000      	movs	r0, #0
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <__clzsi2>:
 8000b90:	211c      	movs	r1, #28
 8000b92:	2301      	movs	r3, #1
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	4298      	cmp	r0, r3
 8000b98:	d301      	bcc.n	8000b9e <__clzsi2+0xe>
 8000b9a:	0c00      	lsrs	r0, r0, #16
 8000b9c:	3910      	subs	r1, #16
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	d301      	bcc.n	8000ba8 <__clzsi2+0x18>
 8000ba4:	0a00      	lsrs	r0, r0, #8
 8000ba6:	3908      	subs	r1, #8
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d301      	bcc.n	8000bb2 <__clzsi2+0x22>
 8000bae:	0900      	lsrs	r0, r0, #4
 8000bb0:	3904      	subs	r1, #4
 8000bb2:	a202      	add	r2, pc, #8	; (adr r2, 8000bbc <__clzsi2+0x2c>)
 8000bb4:	5c10      	ldrb	r0, [r2, r0]
 8000bb6:	1840      	adds	r0, r0, r1
 8000bb8:	4770      	bx	lr
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	02020304 	.word	0x02020304
 8000bc0:	01010101 	.word	0x01010101
	...

08000bcc <__eqsf2>:
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	0042      	lsls	r2, r0, #1
 8000bd0:	024e      	lsls	r6, r1, #9
 8000bd2:	004c      	lsls	r4, r1, #1
 8000bd4:	0245      	lsls	r5, r0, #9
 8000bd6:	0a6d      	lsrs	r5, r5, #9
 8000bd8:	0e12      	lsrs	r2, r2, #24
 8000bda:	0fc3      	lsrs	r3, r0, #31
 8000bdc:	0a76      	lsrs	r6, r6, #9
 8000bde:	0e24      	lsrs	r4, r4, #24
 8000be0:	0fc9      	lsrs	r1, r1, #31
 8000be2:	2aff      	cmp	r2, #255	; 0xff
 8000be4:	d00f      	beq.n	8000c06 <__eqsf2+0x3a>
 8000be6:	2cff      	cmp	r4, #255	; 0xff
 8000be8:	d011      	beq.n	8000c0e <__eqsf2+0x42>
 8000bea:	2001      	movs	r0, #1
 8000bec:	42a2      	cmp	r2, r4
 8000bee:	d000      	beq.n	8000bf2 <__eqsf2+0x26>
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
 8000bf2:	42b5      	cmp	r5, r6
 8000bf4:	d1fc      	bne.n	8000bf0 <__eqsf2+0x24>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d00d      	beq.n	8000c16 <__eqsf2+0x4a>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d1f8      	bne.n	8000bf0 <__eqsf2+0x24>
 8000bfe:	0028      	movs	r0, r5
 8000c00:	1e45      	subs	r5, r0, #1
 8000c02:	41a8      	sbcs	r0, r5
 8000c04:	e7f4      	b.n	8000bf0 <__eqsf2+0x24>
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d1f1      	bne.n	8000bf0 <__eqsf2+0x24>
 8000c0c:	e7eb      	b.n	8000be6 <__eqsf2+0x1a>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	d1ed      	bne.n	8000bf0 <__eqsf2+0x24>
 8000c14:	e7e9      	b.n	8000bea <__eqsf2+0x1e>
 8000c16:	2000      	movs	r0, #0
 8000c18:	e7ea      	b.n	8000bf0 <__eqsf2+0x24>
 8000c1a:	46c0      	nop			; (mov r8, r8)

08000c1c <__gesf2>:
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	004a      	lsls	r2, r1, #1
 8000c20:	024e      	lsls	r6, r1, #9
 8000c22:	0245      	lsls	r5, r0, #9
 8000c24:	0044      	lsls	r4, r0, #1
 8000c26:	0a6d      	lsrs	r5, r5, #9
 8000c28:	0e24      	lsrs	r4, r4, #24
 8000c2a:	0fc3      	lsrs	r3, r0, #31
 8000c2c:	0a76      	lsrs	r6, r6, #9
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	0fc9      	lsrs	r1, r1, #31
 8000c32:	2cff      	cmp	r4, #255	; 0xff
 8000c34:	d015      	beq.n	8000c62 <__gesf2+0x46>
 8000c36:	2aff      	cmp	r2, #255	; 0xff
 8000c38:	d00e      	beq.n	8000c58 <__gesf2+0x3c>
 8000c3a:	2c00      	cmp	r4, #0
 8000c3c:	d115      	bne.n	8000c6a <__gesf2+0x4e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d101      	bne.n	8000c46 <__gesf2+0x2a>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d01c      	beq.n	8000c80 <__gesf2+0x64>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d014      	beq.n	8000c74 <__gesf2+0x58>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d027      	beq.n	8000c9e <__gesf2+0x82>
 8000c4e:	2002      	movs	r0, #2
 8000c50:	3b01      	subs	r3, #1
 8000c52:	4018      	ands	r0, r3
 8000c54:	3801      	subs	r0, #1
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0ee      	beq.n	8000c3a <__gesf2+0x1e>
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	4240      	negs	r0, r0
 8000c60:	e7f9      	b.n	8000c56 <__gesf2+0x3a>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d1fa      	bne.n	8000c5c <__gesf2+0x40>
 8000c66:	2aff      	cmp	r2, #255	; 0xff
 8000c68:	d00e      	beq.n	8000c88 <__gesf2+0x6c>
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d10e      	bne.n	8000c8c <__gesf2+0x70>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0ed      	beq.n	8000c4e <__gesf2+0x32>
 8000c72:	e00b      	b.n	8000c8c <__gesf2+0x70>
 8000c74:	2301      	movs	r3, #1
 8000c76:	3901      	subs	r1, #1
 8000c78:	4399      	bics	r1, r3
 8000c7a:	0008      	movs	r0, r1
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	e7ea      	b.n	8000c56 <__gesf2+0x3a>
 8000c80:	2000      	movs	r0, #0
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e7      	beq.n	8000c56 <__gesf2+0x3a>
 8000c86:	e7e2      	b.n	8000c4e <__gesf2+0x32>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d1e7      	bne.n	8000c5c <__gesf2+0x40>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d1de      	bne.n	8000c4e <__gesf2+0x32>
 8000c90:	4294      	cmp	r4, r2
 8000c92:	dd05      	ble.n	8000ca0 <__gesf2+0x84>
 8000c94:	2102      	movs	r1, #2
 8000c96:	1e58      	subs	r0, r3, #1
 8000c98:	4008      	ands	r0, r1
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	e7db      	b.n	8000c56 <__gesf2+0x3a>
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	42a2      	cmp	r2, r4
 8000ca2:	dc04      	bgt.n	8000cae <__gesf2+0x92>
 8000ca4:	42b5      	cmp	r5, r6
 8000ca6:	d8d2      	bhi.n	8000c4e <__gesf2+0x32>
 8000ca8:	2000      	movs	r0, #0
 8000caa:	42b5      	cmp	r5, r6
 8000cac:	d2d3      	bcs.n	8000c56 <__gesf2+0x3a>
 8000cae:	1e58      	subs	r0, r3, #1
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4398      	bics	r0, r3
 8000cb4:	3001      	adds	r0, #1
 8000cb6:	e7ce      	b.n	8000c56 <__gesf2+0x3a>

08000cb8 <__lesf2>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	0042      	lsls	r2, r0, #1
 8000cbc:	0244      	lsls	r4, r0, #9
 8000cbe:	024d      	lsls	r5, r1, #9
 8000cc0:	0fc3      	lsrs	r3, r0, #31
 8000cc2:	0048      	lsls	r0, r1, #1
 8000cc4:	0a64      	lsrs	r4, r4, #9
 8000cc6:	0e12      	lsrs	r2, r2, #24
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	0e00      	lsrs	r0, r0, #24
 8000ccc:	0fc9      	lsrs	r1, r1, #31
 8000cce:	2aff      	cmp	r2, #255	; 0xff
 8000cd0:	d012      	beq.n	8000cf8 <__lesf2+0x40>
 8000cd2:	28ff      	cmp	r0, #255	; 0xff
 8000cd4:	d00c      	beq.n	8000cf0 <__lesf2+0x38>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d112      	bne.n	8000d00 <__lesf2+0x48>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d119      	bne.n	8000d12 <__lesf2+0x5a>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d117      	bne.n	8000d12 <__lesf2+0x5a>
 8000ce2:	2c00      	cmp	r4, #0
 8000ce4:	d02b      	beq.n	8000d3e <__lesf2+0x86>
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4018      	ands	r0, r3
 8000cec:	3801      	subs	r0, #1
 8000cee:	e026      	b.n	8000d3e <__lesf2+0x86>
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0f0      	beq.n	8000cd6 <__lesf2+0x1e>
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	e022      	b.n	8000d3e <__lesf2+0x86>
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d1fb      	bne.n	8000cf4 <__lesf2+0x3c>
 8000cfc:	28ff      	cmp	r0, #255	; 0xff
 8000cfe:	d01f      	beq.n	8000d40 <__lesf2+0x88>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d11f      	bne.n	8000d44 <__lesf2+0x8c>
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d11d      	bne.n	8000d44 <__lesf2+0x8c>
 8000d08:	2002      	movs	r0, #2
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	4018      	ands	r0, r3
 8000d0e:	3801      	subs	r0, #1
 8000d10:	e015      	b.n	8000d3e <__lesf2+0x86>
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d00e      	beq.n	8000d34 <__lesf2+0x7c>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d1e5      	bne.n	8000ce6 <__lesf2+0x2e>
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	dc04      	bgt.n	8000d2a <__lesf2+0x72>
 8000d20:	42ac      	cmp	r4, r5
 8000d22:	d8e0      	bhi.n	8000ce6 <__lesf2+0x2e>
 8000d24:	2000      	movs	r0, #0
 8000d26:	42ac      	cmp	r4, r5
 8000d28:	d209      	bcs.n	8000d3e <__lesf2+0x86>
 8000d2a:	1e58      	subs	r0, r3, #1
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4398      	bics	r0, r3
 8000d30:	3001      	adds	r0, #1
 8000d32:	e004      	b.n	8000d3e <__lesf2+0x86>
 8000d34:	2301      	movs	r3, #1
 8000d36:	3901      	subs	r1, #1
 8000d38:	4399      	bics	r1, r3
 8000d3a:	0008      	movs	r0, r1
 8000d3c:	3001      	adds	r0, #1
 8000d3e:	bd30      	pop	{r4, r5, pc}
 8000d40:	2d00      	cmp	r5, #0
 8000d42:	d1d7      	bne.n	8000cf4 <__lesf2+0x3c>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d1ce      	bne.n	8000ce6 <__lesf2+0x2e>
 8000d48:	4282      	cmp	r2, r0
 8000d4a:	dde7      	ble.n	8000d1c <__lesf2+0x64>
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	1e58      	subs	r0, r3, #1
 8000d50:	4008      	ands	r0, r1
 8000d52:	3801      	subs	r0, #1
 8000d54:	e7f3      	b.n	8000d3e <__lesf2+0x86>
 8000d56:	46c0      	nop			; (mov r8, r8)

08000d58 <CapacitiveSensorinit>:

#define LPMODE
int sleepmodevar=0;

void CapacitiveSensorinit()
{
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	// initialize this instance's variables
	// Serial.begin(9600);		// for debugging
	error = 1;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <CapacitiveSensorinit+0xa0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]
	f_CPU=16000000;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <CapacitiveSensorinit+0xa4>)
 8000d64:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <CapacitiveSensorinit+0xa8>)
 8000d66:	601a      	str	r2, [r3, #0]
	loopTimingFactor = 310;		// determined empirically -  a hack
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <CapacitiveSensorinit+0xac>)
 8000d6a:	229b      	movs	r2, #155	; 0x9b
 8000d6c:	0052      	lsls	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
	CS_Timeout_Millis = (2000 * (float)loopTimingFactor * (float)f_CPU) / 16000000;
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <CapacitiveSensorinit+0xac>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fe91 	bl	8000a9c <__aeabi_ui2f>
 8000d7a:	1c03      	adds	r3, r0, #0
 8000d7c:	4922      	ldr	r1, [pc, #136]	; (8000e08 <CapacitiveSensorinit+0xb0>)
 8000d7e:	1c18      	adds	r0, r3, #0
 8000d80:	f7ff fb76 	bl	8000470 <__aeabi_fmul>
 8000d84:	1c03      	adds	r3, r0, #0
 8000d86:	1c1c      	adds	r4, r3, #0
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <CapacitiveSensorinit+0xa4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fe85 	bl	8000a9c <__aeabi_ui2f>
 8000d92:	1c03      	adds	r3, r0, #0
 8000d94:	1c19      	adds	r1, r3, #0
 8000d96:	1c20      	adds	r0, r4, #0
 8000d98:	f7ff fb6a 	bl	8000470 <__aeabi_fmul>
 8000d9c:	1c03      	adds	r3, r0, #0
 8000d9e:	491b      	ldr	r1, [pc, #108]	; (8000e0c <CapacitiveSensorinit+0xb4>)
 8000da0:	1c18      	adds	r0, r3, #0
 8000da2:	f7ff fa53 	bl	800024c <__aeabi_fdiv>
 8000da6:	1c03      	adds	r3, r0, #0
 8000da8:	1c18      	adds	r0, r3, #0
 8000daa:	f7ff fa37 	bl	800021c <__aeabi_f2uiz>
 8000dae:	0002      	movs	r2, r0
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <CapacitiveSensorinit+0xb8>)
 8000db2:	601a      	str	r2, [r3, #0]
	CS_AutocaL_Millis = 20000;
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <CapacitiveSensorinit+0xbc>)
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <CapacitiveSensorinit+0xc0>)
 8000db8:	601a      	str	r2, [r3, #0]


	DIRECT_MODE_OUTPUT(0,sBit);						// sendpin to OUTPUT
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
	DIRECT_MODE_INPUT(0,rBit);						// receivePin to INPUT
 8000dca:	23a0      	movs	r3, #160	; 0xa0
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	23a0      	movs	r3, #160	; 0xa0
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	4911      	ldr	r1, [pc, #68]	; (8000e1c <CapacitiveSensorinit+0xc4>)
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
	DIRECT_WRITE_LOW(0,sBit);
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000de0:	23a0      	movs	r3, #160	; 0xa0
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	2102      	movs	r1, #2
 8000de6:	430a      	orrs	r2, r1
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28

	// get pin mapping and port for receive Pin - from digital pin functions in Wiring.c
	leastTotal = 0x0FFFFFFFL;   // input large value for autocalibrate begin
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <CapacitiveSensorinit+0xc8>)
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <CapacitiveSensorinit+0xcc>)
 8000dee:	601a      	str	r2, [r3, #0]
	//lastCal = millis();         // set millis for start
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bdb0      	pop	{r4, r5, r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	2000003c 	.word	0x2000003c
 8000dfc:	20000044 	.word	0x20000044
 8000e00:	00f42400 	.word	0x00f42400
 8000e04:	20000038 	.word	0x20000038
 8000e08:	44fa0000 	.word	0x44fa0000
 8000e0c:	4b742400 	.word	0x4b742400
 8000e10:	20000030 	.word	0x20000030
 8000e14:	20000040 	.word	0x20000040
 8000e18:	00004e20 	.word	0x00004e20
 8000e1c:	eeffffff 	.word	0xeeffffff
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	0fffffff 	.word	0x0fffffff

08000e28 <capacitiveSensorRaw>:


long capacitiveSensorRaw(unsigned char samples)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	0002      	movs	r2, r0
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	701a      	strb	r2, [r3, #0]
	sleepmodevar=checksleepMode();
 8000e34:	f000 fa0d 	bl	8001252 <checksleepMode>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <capacitiveSensorRaw+0x84>)
 8000e3c:	601a      	str	r2, [r3, #0]
	if(sleepmodevar==10){
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <capacitiveSensorRaw+0x84>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b0a      	cmp	r3, #10
 8000e44:	d102      	bne.n	8000e4c <capacitiveSensorRaw+0x24>
		return -10;
 8000e46:	230a      	movs	r3, #10
 8000e48:	425b      	negs	r3, r3
 8000e4a:	e02a      	b.n	8000ea2 <capacitiveSensorRaw+0x7a>
	}
	total = 0;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <capacitiveSensorRaw+0x88>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	if (samples == 0) return 0;
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <capacitiveSensorRaw+0x36>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e021      	b.n	8000ea2 <capacitiveSensorRaw+0x7a>
	if (error < 0) return -1;                  // bad pin - this appears not to work
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <capacitiveSensorRaw+0x8c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da02      	bge.n	8000e6c <capacitiveSensorRaw+0x44>
 8000e66:	2301      	movs	r3, #1
 8000e68:	425b      	negs	r3, r3
 8000e6a:	e01a      	b.n	8000ea2 <capacitiveSensorRaw+0x7a>
	for (uint8_t i = 0; i < samples; i++) {    // loop for samples parameter - simple lowpass filter
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e00c      	b.n	8000e90 <capacitiveSensorRaw+0x68>
		if (SenseOneCycle() < 0)  return -2;   // variable over timeout
 8000e76:	f000 f81f 	bl	8000eb8 <SenseOneCycle>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	da02      	bge.n	8000e84 <capacitiveSensorRaw+0x5c>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	425b      	negs	r3, r3
 8000e82:	e00e      	b.n	8000ea2 <capacitiveSensorRaw+0x7a>
	for (uint8_t i = 0; i < samples; i++) {    // loop for samples parameter - simple lowpass filter
 8000e84:	210f      	movs	r1, #15
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	3201      	adds	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fa      	adds	r2, r7, r3
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d3eb      	bcc.n	8000e76 <capacitiveSensorRaw+0x4e>
	}
	return total;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <capacitiveSensorRaw+0x88>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	20000028 	.word	0x20000028
 8000eb0:	20000048 	.word	0x20000048
 8000eb4:	2000003c 	.word	0x2000003c

08000eb8 <SenseOneCycle>:



int SenseOneCycle(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    noInterrupts();
	DIRECT_WRITE_LOW(sendPin, sBit);	// sendPin Register low
 8000ebc:	23a0      	movs	r3, #160	; 0xa0
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
	DIRECT_MODE_INPUT(receivePin, rBit);	// receivePin to input (pullups are off)
 8000ecc:	23a0      	movs	r3, #160	; 0xa0
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	4946      	ldr	r1, [pc, #280]	; (8000ff0 <SenseOneCycle+0x138>)
 8000ed8:	400a      	ands	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
	DIRECT_MODE_OUTPUT(receivePin, rBit); // receivePin to OUTPUT
 8000edc:	23a0      	movs	r3, #160	; 0xa0
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	23a0      	movs	r3, #160	; 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	0449      	lsls	r1, r1, #17
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
	DIRECT_WRITE_LOW(receivePin, rBit);	// pin is now LOW AND OUTPUT
 8000eee:	23a0      	movs	r3, #160	; 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ef4:	23a0      	movs	r3, #160	; 0xa0
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0149      	lsls	r1, r1, #5
 8000efc:	430a      	orrs	r2, r1
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
	delayMicroseconds(10);
 8000f00:	200a      	movs	r0, #10
 8000f02:	f000 f87b 	bl	8000ffc <delayMicroseconds>
	//HAL_Delay(1000);
	DIRECT_MODE_INPUT(receivePin, rBit);	// receivePin to input (pullups are off)
 8000f06:	23a0      	movs	r3, #160	; 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	4937      	ldr	r1, [pc, #220]	; (8000ff0 <SenseOneCycle+0x138>)
 8000f12:	400a      	ands	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
	DIRECT_WRITE_HIGH(sendPin, sBit);	// sendPin High
 8000f16:	23a0      	movs	r3, #160	; 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	695a      	ldr	r2, [r3, #20]
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	2102      	movs	r1, #2
 8000f22:	430a      	orrs	r2, r1
 8000f24:	615a      	str	r2, [r3, #20]
    interrupts();


	while ( !DIRECT_READ(receivePin, rBit) && (total < CS_Timeout_Millis) ) {  // while receive pin is LOW AND total is positive value
 8000f26:	e004      	b.n	8000f32 <SenseOneCycle+0x7a>
		total++;
 8000f28:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000f30:	601a      	str	r2, [r3, #0]
	while ( !DIRECT_READ(receivePin, rBit) && (total < CS_Timeout_Millis) ) {  // while receive pin is LOW AND total is positive value
 8000f32:	23a0      	movs	r3, #160	; 0xa0
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	0b1b      	lsrs	r3, r3, #12
 8000f3a:	d105      	bne.n	8000f48 <SenseOneCycle+0x90>
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <SenseOneCycle+0x140>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3ef      	bcc.n	8000f28 <SenseOneCycle+0x70>
	}
	//Serial.print("SenseOneCycle(1): ");
	//Serial.println(total);


	if (total > CS_Timeout_Millis) {
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <SenseOneCycle+0x140>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d902      	bls.n	8000f5a <SenseOneCycle+0xa2>
		return -2;         //  total variable over timeout
 8000f54:	2302      	movs	r3, #2
 8000f56:	425b      	negs	r3, r3
 8000f58:	e047      	b.n	8000fea <SenseOneCycle+0x132>
	}

	// set receive pin HIGH briefly to charge up fully - because the while loop above will exit when pin is ~ 2.5V
    noInterrupts();
	DIRECT_WRITE_HIGH(receivePin, rBit);
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	23a0      	movs	r3, #160	; 0xa0
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	2180      	movs	r1, #128	; 0x80
 8000f66:	0149      	lsls	r1, r1, #5
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	615a      	str	r2, [r3, #20]
	DIRECT_MODE_OUTPUT(receivePin, rBit);  // receivePin to OUTPUT - pin is now HIGH AND OUTPUT
 8000f6c:	23a0      	movs	r3, #160	; 0xa0
 8000f6e:	05db      	lsls	r3, r3, #23
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	23a0      	movs	r3, #160	; 0xa0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	0449      	lsls	r1, r1, #17
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
	DIRECT_WRITE_HIGH(receivePin, rBit);
 8000f7e:	23a0      	movs	r3, #160	; 0xa0
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	23a0      	movs	r3, #160	; 0xa0
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0149      	lsls	r1, r1, #5
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
	DIRECT_MODE_INPUT(receivePin, rBit);	// receivePin to INPUT (pullup is off)
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	4915      	ldr	r1, [pc, #84]	; (8000ff0 <SenseOneCycle+0x138>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
	DIRECT_WRITE_LOW(sendPin, sBit);	// sendPin LOW
 8000fa0:	23a0      	movs	r3, #160	; 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa6:	23a0      	movs	r3, #160	; 0xa0
 8000fa8:	05db      	lsls	r3, r3, #23
 8000faa:	2102      	movs	r1, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();

	while ( DIRECT_READ(receivePin, rBit) && (total < CS_Timeout_Millis) ) {  // while receive pin is HIGH  AND total is less than timeout
 8000fb0:	e004      	b.n	8000fbc <SenseOneCycle+0x104>
		total++;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000fba:	601a      	str	r2, [r3, #0]
	while ( DIRECT_READ(receivePin, rBit) && (total < CS_Timeout_Millis) ) {  // while receive pin is HIGH  AND total is less than timeout
 8000fbc:	23a0      	movs	r3, #160	; 0xa0
 8000fbe:	05db      	lsls	r3, r3, #23
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	0b1b      	lsrs	r3, r3, #12
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d005      	beq.n	8000fd6 <SenseOneCycle+0x11e>
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <SenseOneCycle+0x140>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3ed      	bcc.n	8000fb2 <SenseOneCycle+0xfa>
	}

	//Serial.print("SenseOneCycle(2): ");
	//Serial.println(total)
	if (total >= CS_Timeout_Millis) {
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <SenseOneCycle+0x13c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <SenseOneCycle+0x140>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d302      	bcc.n	8000fe8 <SenseOneCycle+0x130>
		return -2;     // total variable over timeout
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	e000      	b.n	8000fea <SenseOneCycle+0x132>
	} else {
		return 1;
 8000fe8:	2301      	movs	r3, #1
	}
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	eeffffff 	.word	0xeeffffff
 8000ff4:	20000048 	.word	0x20000048
 8000ff8:	20000030 	.word	0x20000030

08000ffc <delayMicroseconds>:

void delayMicroseconds(volatile unsigned int microsec){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	for(int i=0;i<microsec*160;i++){}
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e002      	b.n	8001010 <delayMicroseconds+0x14>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	0013      	movs	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	189b      	adds	r3, r3, r2
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	001a      	movs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	429a      	cmp	r2, r3
 8001020:	d8f3      	bhi.n	800100a <delayMicroseconds+0xe>

}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}

0800102a <SystemClock_Decrease2>:
  {
    Error_Handler();
  }
}

void SystemClock_Decrease2(void){
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b093      	sub	sp, #76	; 0x4c
 800102e:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	2438      	movs	r4, #56	; 0x38
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2310      	movs	r3, #16
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f001 fc30 	bl	80028a0 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001040:	003b      	movs	r3, r7
 8001042:	0018      	movs	r0, r3
 8001044:	2338      	movs	r3, #56	; 0x38
 8001046:	001a      	movs	r2, r3
 8001048:	2100      	movs	r1, #0
 800104a:	f001 fc29 	bl	80028a0 <memset>

  /* Select HSI as system clock source a */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001054:	193b      	adds	r3, r7, r4
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105a:	193b      	adds	r3, r7, r4
 800105c:	2100      	movs	r1, #0
 800105e:	0018      	movs	r0, r3
 8001060:	f001 fa70 	bl	8002544 <HAL_RCC_ClockConfig>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Decrease2+0x42>
  {
    /* Initialization Error */
    Error_Handler();
 8001068:	f000 faa8 	bl	80015bc <Error_Handler>
  }

  /* Modify HSI to HSI DIV8 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106c:	003b      	movs	r3, r7
 800106e:	2202      	movs	r2, #2
 8001070:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001072:	003b      	movs	r3, r7
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	0052      	lsls	r2, r2, #1
 8001078:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV8;
 800107a:	003b      	movs	r3, r7
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	0152      	lsls	r2, r2, #5
 8001080:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	003b      	movs	r3, r7
 8001084:	2240      	movs	r2, #64	; 0x40
 8001086:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001088:	003b      	movs	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	003b      	movs	r3, r7
 8001090:	0018      	movs	r0, r3
 8001092:	f000 ff37 	bl	8001f04 <HAL_RCC_OscConfig>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Decrease2+0x74>
  {
    /* Initialization Error */
    Error_Handler();
 800109a:	f000 fa8f 	bl	80015bc <Error_Handler>
  }
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b013      	add	sp, #76	; 0x4c
 80010a4:	bd90      	pop	{r4, r7, pc}

080010a6 <MX_GPIO_Deinit>:

void MX_GPIO_Deinit(){
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	015a      	lsls	r2, r3, #5
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fd97 	bl	8001be8 <HAL_GPIO_DeInit>
	//LEDCLEAN();
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <MX_GPIO_Init>:

void MX_GPIO_Init(void)   //funktion aus Main einfach reinkopieren
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	0018      	movs	r0, r3
 80010ca:	2314      	movs	r3, #20
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f001 fbe6 	bl	80028a0 <memset>

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_GPIO_Init+0x5c>)
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_GPIO_Init+0x5c>)
 80010da:	2101      	movs	r1, #1
 80010dc:	430a      	orrs	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_GPIO_Init+0x5c>)
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	2201      	movs	r2, #1
 80010e6:	4013      	ands	r3, r2
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin : PA12 */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	0152      	lsls	r2, r2, #5
 80010f2:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	1d3a      	adds	r2, r7, #4
 8001102:	23a0      	movs	r3, #160	; 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fc09 	bl	8001920 <HAL_GPIO_Init>
	  delayMicroseconds(10);
 800110e:	200a      	movs	r0, #10
 8001110:	f7ff ff74 	bl	8000ffc <delayMicroseconds>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b006      	add	sp, #24
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000

08001120 <initTaster>:

void initTaster(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(LP_PORT, LP_pin, GPIO_PIN_RESET);
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2200      	movs	r2, #0
 800112c:	2102      	movs	r1, #2
 800112e:	0018      	movs	r0, r3
 8001130:	f000 fe47 	bl	8001dc2 <HAL_GPIO_WritePin>
	  /* PA.11 will be used to exit from Low Power Run mode */
	  GPIO_InitTypeDef      GPIO_InitStruct = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	0018      	movs	r0, r3
 8001138:	2314      	movs	r3, #20
 800113a:	001a      	movs	r2, r3
 800113c:	2100      	movs	r1, #0
 800113e:	f001 fbaf 	bl	80028a0 <memset>
	  GPIO_InitStruct.Pin = LP_pin;
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2202      	movs	r2, #2
 800114c:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2203      	movs	r2, #3
 8001158:	60da      	str	r2, [r3, #12]

	  /* Enable GPIOA clock */
	  __HAL_RCC_GPIOA_CLK_ENABLE();									//////////////////////könnte zu Fehler führen
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <initTaster+0x68>)
 800115c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <initTaster+0x68>)
 8001160:	2101      	movs	r1, #1
 8001162:	430a      	orrs	r2, r1
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <initTaster+0x68>)
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116a:	2201      	movs	r2, #1
 800116c:	4013      	ands	r3, r2
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

	  HAL_GPIO_Init(LP_PORT, &GPIO_InitStruct);
 8001172:	1d3a      	adds	r2, r7, #4
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	0011      	movs	r1, r2
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fbd0 	bl	8001920 <HAL_GPIO_Init>
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b006      	add	sp, #24
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000

0800118c <deinitTaster>:

void deinitTaster(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(LP_PORT, LP_pin);
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	2102      	movs	r1, #2
 8001196:	0018      	movs	r0, r3
 8001198:	f000 fd26 	bl	8001be8 <HAL_GPIO_DeInit>
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <NextState>:



void NextState(enum States* current){
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
	switch (*current){
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d01a      	beq.n	80011e8 <NextState+0x46>
 80011b2:	dc02      	bgt.n	80011ba <NextState+0x18>
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <NextState+0x22>
	case RED:
		*current=OFF;
		LEDCLEAN();
	break;
	default:
	break;
 80011b8:	e01c      	b.n	80011f4 <NextState+0x52>
	switch (*current){
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d00e      	beq.n	80011dc <NextState+0x3a>
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d006      	beq.n	80011d0 <NextState+0x2e>
	break;
 80011c2:	e017      	b.n	80011f4 <NextState+0x52>
		*current=GREEN;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	701a      	strb	r2, [r3, #0]
		LEDGREEN();
 80011ca:	f000 f8ed 	bl	80013a8 <LEDGREEN>
	break;
 80011ce:	e011      	b.n	80011f4 <NextState+0x52>
		*current=YELLOW;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
		LEDYELLOW();
 80011d6:	f000 f875 	bl	80012c4 <LEDYELLOW>
	break;
 80011da:	e00b      	b.n	80011f4 <NextState+0x52>
		*current=RED;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		LEDRED();
 80011e2:	f000 f8a9 	bl	8001338 <LEDRED>
	break;
 80011e6:	e005      	b.n	80011f4 <NextState+0x52>
		*current=OFF;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
		LEDCLEAN();
 80011ee:	f000 f915 	bl	800141c <LEDCLEAN>
	break;
 80011f2:	46c0      	nop			; (mov r8, r8)
	}
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}

080011fc <sleep>:

void sleep(enum States* current){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	MX_GPIO_Deinit();
 8001204:	f7ff ff4f 	bl	80010a6 <MX_GPIO_Deinit>
	initTaster();
 8001208:	f7ff ff8a 	bl	8001120 <initTaster>
	//LEDCLEAN();
	SystemClock_Decrease2();
 800120c:	f7ff ff0d 	bl	800102a <SystemClock_Decrease2>
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	0018      	movs	r0, r3
 8001216:	f000 fdf1 	bl	8001dfc <HAL_PWREx_ControlVoltageScaling>
	HAL_PWREx_EnableLowPowerRunMode();
 800121a:	f000 fe2f 	bl	8001e7c <HAL_PWREx_EnableLowPowerRunMode>
	while(HAL_GPIO_ReadPin(LP_PORT, LP_pin) == GPIO_PIN_SET)
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	23a0      	movs	r3, #160	; 0xa0
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	2102      	movs	r1, #2
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fdae 	bl	8001d88 <HAL_GPIO_ReadPin>
 800122c:	0003      	movs	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d0f6      	beq.n	8001220 <sleep+0x24>
		     {
		     }
	HAL_PWREx_DisableLowPowerRunMode();
 8001232:	f000 fe31 	bl	8001e98 <HAL_PWREx_DisableLowPowerRunMode>
	SystemClock_Config();
 8001236:	f000 f94a 	bl	80014ce <SystemClock_Config>
	deinitTaster();
 800123a:	f7ff ffa7 	bl	800118c <deinitTaster>
	initLED();
 800123e:	f000 f81f 	bl	8001280 <initLED>
	MX_GPIO_Init();
 8001242:	f7ff ff3d 	bl	80010c0 <MX_GPIO_Init>
	CapacitiveSensorinit();
 8001246:	f7ff fd87 	bl	8000d58 <CapacitiveSensorinit>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}

08001252 <checksleepMode>:
	default:
	break;
	}
}

int checksleepMode(){
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
	initTaster();
 8001256:	f7ff ff63 	bl	8001120 <initTaster>
	if(HAL_GPIO_ReadPin(LP_PORT, LP_pin)==GPIO_PIN_SET){
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	2102      	movs	r1, #2
 8001260:	0018      	movs	r0, r3
 8001262:	f000 fd91 	bl	8001d88 <HAL_GPIO_ReadPin>
 8001266:	0003      	movs	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <checksleepMode+0x1e>
								//Button pressed
		return 10;
 800126c:	230a      	movs	r3, #10
 800126e:	e004      	b.n	800127a <checksleepMode+0x28>
	}
	else{
		deinitTaster();
 8001270:	f7ff ff8c 	bl	800118c <deinitTaster>
		CapacitiveSensorinit();							//Button not pressed
 8001274:	f7ff fd70 	bl	8000d58 <CapacitiveSensorinit>
		return 0;
 8001278:	2300      	movs	r3, #0
	}
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <initLED>:
 *  Created on: 25.06.2020
 *      Author: Felix
 */

#include "LED.h"
void initLED(){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <initLED+0x40>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <initLED+0x40>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <initLED+0x40>)
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <initLED+0x40>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <initLED+0x40>)
 80012a4:	2102      	movs	r1, #2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <initLED+0x40>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	40021000 	.word	0x40021000

080012c4 <LEDYELLOW>:

void LEDYELLOW(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct1 = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	0018      	movs	r0, r3
 80012ce:	2314      	movs	r3, #20
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f001 fae4 	bl	80028a0 <memset>

		HAL_GPIO_WritePin(LEDPORT1, LEDPIN1, GPIO_PIN_RESET);
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	0059      	lsls	r1, r3, #1
 80012dc:	23a0      	movs	r3, #160	; 0xa0
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	2200      	movs	r2, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fd6d 	bl	8001dc2 <HAL_GPIO_WritePin>
		GPIO_InitStruct1.Pin = LEDPIN1;
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	0052      	lsls	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2201      	movs	r2, #1
 80012f4:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct1.Pull = GPIO_NOPULL;
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(LEDPORT1, &GPIO_InitStruct1);
 80012fc:	1d3a      	adds	r2, r7, #4
 80012fe:	23a0      	movs	r3, #160	; 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f000 fb0b 	bl	8001920 <HAL_GPIO_Init>


		GPIO_InitStruct1.Pin = LEDPIN2;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct1.Mode = GPIO_MODE_INPUT;
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct1.Pull = GPIO_NOPULL;
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(LEDPORT2, &GPIO_InitStruct1);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <LEDYELLOW+0x70>)
 8001322:	0019      	movs	r1, r3
 8001324:	0010      	movs	r0, r2
 8001326:	f000 fafb 	bl	8001920 <HAL_GPIO_Init>

		/* Insert delay 100 ms */
		//HAL_Delay(100);
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b006      	add	sp, #24
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	50000400 	.word	0x50000400

08001338 <LEDRED>:
void LEDRED(){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	0018      	movs	r0, r3
 8001342:	2314      	movs	r3, #20
 8001344:	001a      	movs	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f001 faaa 	bl	80028a0 <memset>

		HAL_GPIO_WritePin(LEDPORT2, LEDPIN2, GPIO_PIN_RESET);
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <LEDRED+0x6c>)
 8001352:	2200      	movs	r2, #0
 8001354:	0019      	movs	r1, r3
 8001356:	f000 fd34 	bl	8001dc2 <HAL_GPIO_WritePin>

		GPIO_InitStruct2.Pin = LEDPIN2;
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2201      	movs	r2, #1
 8001366:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(LEDPORT2, &GPIO_InitStruct2);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <LEDRED+0x6c>)
 8001372:	0019      	movs	r1, r3
 8001374:	0010      	movs	r0, r2
 8001376:	f000 fad3 	bl	8001920 <HAL_GPIO_Init>

		GPIO_InitStruct2.Pin = LEDPIN1;
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct2.Mode = GPIO_MODE_INPUT;
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct2.Pull = GPIO_NOPULL;
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(LEDPORT1, &GPIO_InitStruct2);
 800138e:	1d3a      	adds	r2, r7, #4
 8001390:	23a0      	movs	r3, #160	; 0xa0
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	0011      	movs	r1, r2
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fac2 	bl	8001920 <HAL_GPIO_Init>

		/* Insert delay 100 ms */
		//HAL_Delay(100);

}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	50000400 	.word	0x50000400

080013a8 <LEDGREEN>:
void LEDGREEN(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct3 = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	0018      	movs	r0, r3
 80013b2:	2314      	movs	r3, #20
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f001 fa72 	bl	80028a0 <memset>

		HAL_GPIO_WritePin(LEDPORT1, LEDPIN1, GPIO_PIN_SET);
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	0059      	lsls	r1, r3, #1
 80013c0:	23a0      	movs	r3, #160	; 0xa0
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	2201      	movs	r2, #1
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 fcfb 	bl	8001dc2 <HAL_GPIO_WritePin>

		GPIO_InitStruct3.Pin = LEDPIN1;
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	0052      	lsls	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct3.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2201      	movs	r2, #1
 80013d8:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct3.Pull = GPIO_NOPULL;
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(LEDPORT1, &GPIO_InitStruct3);
 80013e0:	1d3a      	adds	r2, r7, #4
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 fa99 	bl	8001920 <HAL_GPIO_Init>

		GPIO_InitStruct3.Pin = LEDPIN2;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct3.Mode = GPIO_MODE_INPUT;
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct3.Pull = GPIO_NOPULL;
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(LEDPORT2, &GPIO_InitStruct3);
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <LEDGREEN+0x70>)
 8001406:	0019      	movs	r1, r3
 8001408:	0010      	movs	r0, r2
 800140a:	f000 fa89 	bl	8001920 <HAL_GPIO_Init>

		//HAL_Delay(100);

}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b006      	add	sp, #24
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	50000400 	.word	0x50000400

0800141c <LEDCLEAN>:

void LEDCLEAN(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(LEDPORT1, LEDPIN1);
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	005a      	lsls	r2, r3, #1
 8001424:	23a0      	movs	r3, #160	; 0xa0
 8001426:	05db      	lsls	r3, r3, #23
 8001428:	0011      	movs	r1, r2
 800142a:	0018      	movs	r0, r3
 800142c:	f000 fbdc 	bl	8001be8 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(LEDPORT2, LEDPIN2);
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <LEDCLEAN+0x28>)
 8001436:	0019      	movs	r1, r3
 8001438:	0010      	movs	r0, r2
 800143a:	f000 fbd5 	bl	8001be8 <HAL_GPIO_DeInit>
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	50000400 	.word	0x50000400

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_InitTypeDef          GPIO_InitStruct = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	0018      	movs	r0, r3
 8001452:	2314      	movs	r3, #20
 8001454:	001a      	movs	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	f001 fa22 	bl	80028a0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 f928 	bl	80016b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  int capsenvar=0;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  int timeholddown=0;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  enum States currentstate=OFF;
 8001468:	1cfb      	adds	r3, r7, #3
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f82e 	bl	80014ce <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CapacitiveSensorinit();
 8001472:	f7ff fc71 	bl	8000d58 <CapacitiveSensorinit>
  initLED();
 8001476:	f7ff ff03 	bl	8001280 <initLED>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147a:	f000 f871 	bl	8001560 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	  capsenvar=capacitiveSensorRaw(30);	//Sensor mit Reset pin aufbauen
 800147e:	201e      	movs	r0, #30
 8001480:	f7ff fcd2 	bl	8000e28 <capacitiveSensorRaw>
 8001484:	0003      	movs	r3, r0
 8001486:	61bb      	str	r3, [r7, #24]
	  if(capsenvar >= 300){
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	232c      	movs	r3, #44	; 0x2c
 800148c:	33ff      	adds	r3, #255	; 0xff
 800148e:	429a      	cmp	r2, r3
 8001490:	dd03      	ble.n	800149a <main+0x52>
	  	  	   timeholddown++;}
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	e7f1      	b.n	800147e <main+0x36>
	  	  	  else if(capsenvar==-10){	//Lowpowermode
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	330a      	adds	r3, #10
 800149e:	d104      	bne.n	80014aa <main+0x62>
	  	  		  sleep(&currentstate);
 80014a0:	1cfb      	adds	r3, r7, #3
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff feaa 	bl	80011fc <sleep>
 80014a8:	e7e9      	b.n	800147e <main+0x36>
	  	  	  }
	  	  	  else{
	  	  		/* Buttonstatemaschine einfügen*/
	  	  		if(timeholddown>2/*0*/){		//Falls länger gedrückt werden würde
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	dd04      	ble.n	80014ba <main+0x72>
	  	  			NextState(&currentstate);
 80014b0:	1cfb      	adds	r3, r7, #3
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff fe75 	bl	80011a2 <NextState>
 80014b8:	e006      	b.n	80014c8 <main+0x80>
	  	  		}
	  	  		else if (timeholddown>0){
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	dd03      	ble.n	80014c8 <main+0x80>
	  	  			NextState(&currentstate);	//Falls kurz gedrückt wird
 80014c0:	1cfb      	adds	r3, r7, #3
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff fe6d 	bl	80011a2 <NextState>
	  	  		}
	  	  		timeholddown=0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
	  capsenvar=capacitiveSensorRaw(30);	//Sensor mit Reset pin aufbauen
 80014cc:	e7d7      	b.n	800147e <main+0x36>

080014ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b093      	sub	sp, #76	; 0x4c
 80014d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d4:	2410      	movs	r4, #16
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2338      	movs	r3, #56	; 0x38
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f001 f9de 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	003b      	movs	r3, r7
 80014e6:	0018      	movs	r0, r3
 80014e8:	2310      	movs	r3, #16
 80014ea:	001a      	movs	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	f001 f9d7 	bl	80028a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 fc80 	bl	8001dfc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001502:	193b      	adds	r3, r7, r4
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	0052      	lsls	r2, r2, #1
 8001508:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001516:	193b      	adds	r3, r7, r4
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	193b      	adds	r3, r7, r4
 800151e:	0018      	movs	r0, r3
 8001520:	f000 fcf0 	bl	8001f04 <HAL_RCC_OscConfig>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001528:	f000 f848 	bl	80015bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	003b      	movs	r3, r7
 800152e:	2207      	movs	r2, #7
 8001530:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001532:	003b      	movs	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	003b      	movs	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800153e:	003b      	movs	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001544:	003b      	movs	r3, r7
 8001546:	2100      	movs	r1, #0
 8001548:	0018      	movs	r0, r3
 800154a:	f000 fffb 	bl	8002544 <HAL_RCC_ClockConfig>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001552:	f000 f833 	bl	80015bc <Error_Handler>
  }
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b013      	add	sp, #76	; 0x4c
 800155c:	bd90      	pop	{r4, r7, pc}
	...

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	0018      	movs	r0, r3
 800156a:	2314      	movs	r3, #20
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f001 f996 	bl	80028a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_GPIO_Init+0x58>)
 8001576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_GPIO_Init+0x58>)
 800157a:	2101      	movs	r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	635a      	str	r2, [r3, #52]	; 0x34
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_GPIO_Init+0x58>)
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0152      	lsls	r2, r2, #5
 8001592:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	1d3a      	adds	r2, r7, #4
 80015a2:	23a0      	movs	r3, #160	; 0xa0
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f9b9 	bl	8001920 <HAL_GPIO_Init>

}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b006      	add	sp, #24
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	40021000 	.word	0x40021000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x44>)
 80015d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_MspInit+0x44>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	430a      	orrs	r2, r1
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x44>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2201      	movs	r2, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x44>)
 80015e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_MspInit+0x44>)
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	0549      	lsls	r1, r1, #21
 80015f0:	430a      	orrs	r2, r1
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_MspInit+0x44>)
 80015f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	055b      	lsls	r3, r3, #21
 80015fc:	4013      	ands	r3, r2
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021000 	.word	0x40021000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001638:	f000 f8a4 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <SystemInit+0x14>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0512      	lsls	r2, r2, #20
 800164e:	609a      	str	r2, [r3, #8]
#endif
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001660:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001662:	e003      	b.n	800166c <LoopCopyDataInit>

08001664 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001666:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001668:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800166a:	3104      	adds	r1, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <LoopForever+0xa>)
  ldr r3, =_edata
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <LoopForever+0xe>)
  adds r2, r0, r1
 8001670:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001674:	d3f6      	bcc.n	8001664 <CopyDataInit>
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopForever+0x12>)
  b LoopFillZerobss
 8001678:	e002      	b.n	8001680 <LoopFillZerobss>

0800167a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  str  r3, [r2]
 800167c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167e:	3204      	adds	r2, #4

08001680 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <LoopForever+0x16>)
  cmp r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001684:	d3f9      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001686:	f7ff ffdd 	bl	8001644 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800168a:	f001 f8e5 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff fedb 	bl	8001448 <main>

08001692 <LoopForever>:

LoopForever:
    b LoopForever
 8001692:	e7fe      	b.n	8001692 <LoopForever>
  ldr   r0, =_estack
 8001694:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8001698:	080029d0 	.word	0x080029d0
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016a4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016a8:	20000050 	.word	0x20000050

080016ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x3c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_Init+0x3c>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0049      	lsls	r1, r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f810 	bl	80016f0 <HAL_InitTick>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d003      	beq.n	80016dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e001      	b.n	80016e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff ff74 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	781b      	ldrb	r3, [r3, #0]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_InitTick+0x88>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d02b      	beq.n	8001760 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_InitTick+0x8c>)
 800170a:	681c      	ldr	r4, [r3, #0]
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_InitTick+0x88>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0019      	movs	r1, r3
 8001712:	23fa      	movs	r3, #250	; 0xfa
 8001714:	0098      	lsls	r0, r3, #2
 8001716:	f7fe fcf5 	bl	8000104 <__udivsi3>
 800171a:	0003      	movs	r3, r0
 800171c:	0019      	movs	r1, r3
 800171e:	0020      	movs	r0, r4
 8001720:	f7fe fcf0 	bl	8000104 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f8ed 	bl	8001906 <HAL_SYSTICK_Config>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d112      	bne.n	8001756 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d80a      	bhi.n	800174c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2301      	movs	r3, #1
 800173a:	425b      	negs	r3, r3
 800173c:	2200      	movs	r2, #0
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f8cc 	bl	80018dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_InitTick+0x90>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e00d      	b.n	8001768 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e008      	b.n	8001768 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001756:	230f      	movs	r3, #15
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e003      	b.n	8001768 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001760:	230f      	movs	r3, #15
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001768:	230f      	movs	r3, #15
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b005      	add	sp, #20
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	20000008 	.word	0x20000008
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <HAL_IncTick+0x18>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_IncTick+0x1c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	18d2      	adds	r2, r2, r3
 8001792:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_IncTick+0x18>)
 8001794:	601a      	str	r2, [r3, #0]
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000004c 	.word	0x2000004c
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_GetTick+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	2000004c 	.word	0x2000004c

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b7f      	cmp	r3, #127	; 0x7f
 80017cc:	d828      	bhi.n	8001820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ce:	4a2f      	ldr	r2, [pc, #188]	; (800188c <__NVIC_SetPriority+0xd4>)
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	33c0      	adds	r3, #192	; 0xc0
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	589b      	ldr	r3, [r3, r2]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <__NVIC_SetPriority+0xd4>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	430a      	orrs	r2, r1
 8001818:	33c0      	adds	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800181e:	e031      	b.n	8001884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0019      	movs	r1, r3
 8001828:	230f      	movs	r3, #15
 800182a:	400b      	ands	r3, r1
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	0011      	movs	r1, r2
 8001840:	2203      	movs	r2, #3
 8001842:	400a      	ands	r2, r1
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	43d2      	mvns	r2, r2
 800184e:	401a      	ands	r2, r3
 8001850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	401a      	ands	r2, r3
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0018      	movs	r0, r3
 8001860:	2303      	movs	r3, #3
 8001862:	4003      	ands	r3, r0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <__NVIC_SetPriority+0xd8>)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	001c      	movs	r4, r3
 8001870:	230f      	movs	r3, #15
 8001872:	4023      	ands	r3, r4
 8001874:	3b08      	subs	r3, #8
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	430a      	orrs	r2, r1
 800187a:	3306      	adds	r3, #6
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18c3      	adds	r3, r0, r3
 8001880:	3304      	adds	r3, #4
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b003      	add	sp, #12
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <SysTick_Config+0x40>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e010      	b.n	80018cc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <SysTick_Config+0x44>)
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	3a01      	subs	r2, #1
 80018b0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	2301      	movs	r3, #1
 80018b4:	425b      	negs	r3, r3
 80018b6:	2103      	movs	r1, #3
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff ff7d 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SysTick_Config+0x44>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x44>)
 80018c6:	2207      	movs	r2, #7
 80018c8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	00ffffff 	.word	0x00ffffff
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	210f      	movs	r1, #15
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ffbf 	bl	8001894 <SysTick_Config>
 8001916:	0003      	movs	r3, r0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	e147      	b.n	8001bc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4091      	lsls	r1, r2
 800193a:	000a      	movs	r2, r1
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d100      	bne.n	8001948 <HAL_GPIO_Init+0x28>
 8001946:	e138      	b.n	8001bba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x38>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b12      	cmp	r3, #18
 8001956:	d123      	bne.n	80019a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	58d3      	ldr	r3, [r2, r3]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2207      	movs	r2, #7
 800196a:	4013      	ands	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	409a      	lsls	r2, r3
 8001972:	0013      	movs	r3, r2
 8001974:	43da      	mvns	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2107      	movs	r1, #7
 8001984:	400b      	ands	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	409a      	lsls	r2, r3
 800198a:	0013      	movs	r3, r2
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	6939      	ldr	r1, [r7, #16]
 800199e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d00b      	beq.n	80019f4 <HAL_GPIO_Init+0xd4>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e8:	2b11      	cmp	r3, #17
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b12      	cmp	r3, #18
 80019f2:	d130      	bne.n	8001a56 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	0013      	movs	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	2201      	movs	r2, #1
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	409a      	lsls	r2, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	055b      	lsls	r3, r3, #21
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d100      	bne.n	8001a94 <HAL_GPIO_Init+0x174>
 8001a92:	e092      	b.n	8001bba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3318      	adds	r3, #24
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	589b      	ldr	r3, [r3, r2]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	220f      	movs	r2, #15
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	23a0      	movs	r3, #160	; 0xa0
 8001abc:	05db      	lsls	r3, r3, #23
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x1ca>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <HAL_GPIO_Init+0x2bc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x1c6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a44      	ldr	r2, [pc, #272]	; (8001be0 <HAL_GPIO_Init+0x2c0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x1c2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <HAL_GPIO_Init+0x2c4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x1be>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x1cc>
 8001ade:	2305      	movs	r3, #5
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x1cc>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x1cc>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x1cc>
 8001aea:	2300      	movs	r3, #0
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	2103      	movs	r1, #3
 8001af0:	400a      	ands	r2, r1
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	4093      	lsls	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001afc:	4936      	ldr	r1, [pc, #216]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3318      	adds	r3, #24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b0a:	4a33      	ldr	r2, [pc, #204]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	58d3      	ldr	r3, [r2, r3]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43da      	mvns	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	025b      	lsls	r3, r3, #9
 8001b24:	4013      	ands	r3, r2
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b30:	4929      	ldr	r1, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b3a:	2384      	movs	r3, #132	; 0x84
 8001b3c:	58d3      	ldr	r3, [r2, r3]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	029b      	lsls	r3, r3, #10
 8001b52:	4013      	ands	r3, r2
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b5e:	491e      	ldr	r1, [pc, #120]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b60:	2284      	movs	r2, #132	; 0x84
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	035b      	lsls	r3, r3, #13
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	039b      	lsls	r3, r3, #14
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	40da      	lsrs	r2, r3
 8001bc8:	1e13      	subs	r3, r2, #0
 8001bca:	d000      	beq.n	8001bce <HAL_GPIO_Init+0x2ae>
 8001bcc:	e6b0      	b.n	8001930 <HAL_GPIO_Init+0x10>
  }
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	50000400 	.word	0x50000400
 8001be0:	50000800 	.word	0x50000800
 8001be4:	50000c00 	.word	0x50000c00

08001be8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001bf6:	e0b4      	b.n	8001d62 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d100      	bne.n	8001c0c <HAL_GPIO_DeInit+0x24>
 8001c0a:	e0a7      	b.n	8001d5c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001c0c:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3318      	adds	r3, #24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	589b      	ldr	r3, [r3, r2]
 8001c18:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	220f      	movs	r2, #15
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	23a0      	movs	r3, #160	; 0xa0
 8001c30:	05db      	lsls	r3, r3, #23
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_DeInit+0x76>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_GPIO_DeInit+0x194>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_DeInit+0x72>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_GPIO_DeInit+0x198>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_DeInit+0x6e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4e      	ldr	r2, [pc, #312]	; (8001d84 <HAL_GPIO_DeInit+0x19c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_DeInit+0x6a>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_DeInit+0x78>
 8001c52:	2305      	movs	r3, #5
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_DeInit+0x78>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_DeInit+0x78>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_DeInit+0x78>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	2103      	movs	r1, #3
 8001c64:	400a      	ands	r2, r1
 8001c66:	00d2      	lsls	r2, r2, #3
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d136      	bne.n	8001cde <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001c70:	4a41      	ldr	r2, [pc, #260]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	58d3      	ldr	r3, [r2, r3]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	43d2      	mvns	r2, r2
 8001c7a:	493f      	ldr	r1, [pc, #252]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8001c82:	4a3d      	ldr	r2, [pc, #244]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c84:	2384      	movs	r3, #132	; 0x84
 8001c86:	58d3      	ldr	r3, [r2, r3]
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	43d2      	mvns	r2, r2
 8001c8c:	493a      	ldr	r1, [pc, #232]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2284      	movs	r2, #132	; 0x84
 8001c92:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43d9      	mvns	r1, r3
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	220f      	movs	r2, #15
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3318      	adds	r3, #24
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	589a      	ldr	r2, [r3, r2]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	4829      	ldr	r0, [pc, #164]	; (8001d78 <HAL_GPIO_DeInit+0x190>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	3318      	adds	r3, #24
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	4099      	lsls	r1, r3
 8001cea:	000b      	movs	r3, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	58d3      	ldr	r3, [r2, r3]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	2107      	movs	r1, #7
 8001d02:	400a      	ands	r2, r1
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	210f      	movs	r1, #15
 8001d08:	4091      	lsls	r1, r2
 8001d0a:	000a      	movs	r2, r1
 8001d0c:	43d1      	mvns	r1, r2
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	08d2      	lsrs	r2, r2, #3
 8001d12:	4019      	ands	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	0052      	lsls	r2, r2, #1
 8001d24:	2103      	movs	r1, #3
 8001d26:	4091      	lsls	r1, r2
 8001d28:	000a      	movs	r2, r1
 8001d2a:	43d2      	mvns	r2, r2
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2101      	movs	r1, #1
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4091      	lsls	r1, r2
 8001d3c:	000a      	movs	r2, r1
 8001d3e:	43d2      	mvns	r2, r2
 8001d40:	401a      	ands	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	0052      	lsls	r2, r2, #1
 8001d4e:	2103      	movs	r1, #3
 8001d50:	4091      	lsls	r1, r2
 8001d52:	000a      	movs	r2, r1
 8001d54:	43d2      	mvns	r2, r2
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	40da      	lsrs	r2, r3
 8001d68:	1e13      	subs	r3, r2, #0
 8001d6a:	d000      	beq.n	8001d6e <HAL_GPIO_DeInit+0x186>
 8001d6c:	e744      	b.n	8001bf8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b006      	add	sp, #24
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	50000400 	.word	0x50000400
 8001d80:	50000800 	.word	0x50000800
 8001d84:	50000c00 	.word	0x50000c00

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	000a      	movs	r2, r1
 8001d92:	1cbb      	adds	r3, r7, #2
 8001d94:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	1cba      	adds	r2, r7, #2
 8001d9c:	8812      	ldrh	r2, [r2, #0]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001da2:	230f      	movs	r3, #15
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dac:	230f      	movs	r3, #15
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	0008      	movs	r0, r1
 8001dcc:	0011      	movs	r1, r2
 8001dce:	1cbb      	adds	r3, r7, #2
 8001dd0:	1c02      	adds	r2, r0, #0
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	1c7b      	adds	r3, r7, #1
 8001dd6:	1c0a      	adds	r2, r1, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dda:	1c7b      	adds	r3, r7, #1
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001de2:	1cbb      	adds	r3, r7, #2
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dec:	1cbb      	adds	r3, r7, #2
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d11f      	bne.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	0013      	movs	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	189b      	adds	r3, r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4912      	ldr	r1, [pc, #72]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7fe f968 	bl	8000104 <__udivsi3>
 8001e34:	0003      	movs	r3, r0
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e3a:	e008      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e001      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e009      	b.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	401a      	ands	r2, r3
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d0ed      	beq.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	fffff9ff 	.word	0xfffff9ff
 8001e74:	20000000 	.word	0x20000000
 8001e78:	000f4240 	.word	0x000f4240

08001e7c <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	01c9      	lsls	r1, r1, #7
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40007000 	.word	0x40007000

08001e98 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	189b      	adds	r3, r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4913      	ldr	r1, [pc, #76]	; (8001ef8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7fe f929 	bl	8000104 <__udivsi3>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001ebe:	4910      	ldr	r1, [pc, #64]	; (8001f00 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001ec4:	e008      	b.n	8001ed8 <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if(wait_loop_index != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	e001      	b.n	8001ed8 <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e009      	b.n	8001eec <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d0ed      	beq.n	8001ec6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	000f4240 	.word	0x000f4240
 8001efc:	40007000 	.word	0x40007000
 8001f00:	ffffbfff 	.word	0xffffbfff

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e304      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <HAL_RCC_OscConfig+0x1e>
 8001f20:	e07c      	b.n	800201c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4bc3      	ldr	r3, [pc, #780]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2238      	movs	r2, #56	; 0x38
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4bc0      	ldr	r3, [pc, #768]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2203      	movs	r2, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x44>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	4bb9      	ldr	r3, [pc, #740]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	4013      	ands	r3, r2
 8001f52:	d062      	beq.n	800201a <HAL_RCC_OscConfig+0x116>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d15e      	bne.n	800201a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e2df      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x78>
 8001f6c:	4bb0      	ldr	r3, [pc, #704]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	0249      	lsls	r1, r1, #9
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e020      	b.n	8001fbe <HAL_RCC_OscConfig+0xba>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	23a0      	movs	r3, #160	; 0xa0
 8001f82:	02db      	lsls	r3, r3, #11
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10e      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xa2>
 8001f88:	4ba9      	ldr	r3, [pc, #676]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba8      	ldr	r3, [pc, #672]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	02c9      	lsls	r1, r1, #11
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4ba6      	ldr	r3, [pc, #664]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4ba5      	ldr	r3, [pc, #660]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0249      	lsls	r1, r1, #9
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e00b      	b.n	8001fbe <HAL_RCC_OscConfig+0xba>
 8001fa6:	4ba2      	ldr	r3, [pc, #648]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4ba1      	ldr	r3, [pc, #644]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fac:	49a1      	ldr	r1, [pc, #644]	; (8002234 <HAL_RCC_OscConfig+0x330>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4b9f      	ldr	r3, [pc, #636]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b9e      	ldr	r3, [pc, #632]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	499f      	ldr	r1, [pc, #636]	; (8002238 <HAL_RCC_OscConfig+0x334>)
 8001fba:	400a      	ands	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fbed 	bl	80017a4 <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff fbe8 	bl	80017a4 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e29e      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe2:	4b93      	ldr	r3, [pc, #588]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	4013      	ands	r3, r2
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xcc>
 8001fee:	e015      	b.n	800201c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fbd8 	bl	80017a4 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fbd3 	bl	80017a4 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b64      	cmp	r3, #100	; 0x64
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e289      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200c:	4b88      	ldr	r3, [pc, #544]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0xf6>
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_RCC_OscConfig+0x124>
 8002026:	e099      	b.n	800215c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002028:	4b81      	ldr	r3, [pc, #516]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2238      	movs	r2, #56	; 0x38
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002032:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2203      	movs	r2, #3
 8002038:	4013      	ands	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x144>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d002      	beq.n	800204e <HAL_RCC_OscConfig+0x14a>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d135      	bne.n	80020ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204e:	4b78      	ldr	r3, [pc, #480]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4013      	ands	r3, r2
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x162>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e25c      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b72      	ldr	r3, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a74      	ldr	r2, [pc, #464]	; (800223c <HAL_RCC_OscConfig+0x338>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002082:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x33c>)
 8002088:	4013      	ands	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002096:	4b66      	ldr	r3, [pc, #408]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	2207      	movs	r2, #7
 800209e:	4013      	ands	r3, r2
 80020a0:	4a68      	ldr	r2, [pc, #416]	; (8002244 <HAL_RCC_OscConfig+0x340>)
 80020a2:	40da      	lsrs	r2, r3
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x344>)
 80020a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a8:	4b68      	ldr	r3, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x348>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff fb1f 	bl	80016f0 <HAL_InitTick>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d051      	beq.n	800215a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e232      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d030      	beq.n	8002124 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020c2:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5e      	ldr	r2, [pc, #376]	; (8002240 <HAL_RCC_OscConfig+0x33c>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020d6:	4b56      	ldr	r3, [pc, #344]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b55      	ldr	r3, [pc, #340]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0049      	lsls	r1, r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fb5e 	bl	80017a4 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fb59 	bl	80017a4 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e20f      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4013      	ands	r3, r2
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b48      	ldr	r3, [pc, #288]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a4a      	ldr	r2, [pc, #296]	; (800223c <HAL_RCC_OscConfig+0x338>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	e01b      	b.n	800215c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800212a:	4949      	ldr	r1, [pc, #292]	; (8002250 <HAL_RCC_OscConfig+0x34c>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7ff fb38 	bl	80017a4 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff fb33 	bl	80017a4 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1e9      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	4b38      	ldr	r3, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4013      	ands	r3, r2
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x236>
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2208      	movs	r2, #8
 8002162:	4013      	ands	r3, r2
 8002164:	d047      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2238      	movs	r2, #56	; 0x38
 800216c:	4013      	ands	r3, r2
 800216e:	2b18      	cmp	r3, #24
 8002170:	d10a      	bne.n	8002188 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002172:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002176:	2202      	movs	r2, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d03c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d138      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e1cb      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d019      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fb02 	bl	80017a4 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7ff fafd 	bl	80017a4 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1b3      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d0f1      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2a2>
 80021c2:	e018      	b.n	80021f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	438a      	bics	r2, r1
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fae8 	bl	80017a4 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff fae3 	bl	80017a4 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e199      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d1f1      	bne.n	80021da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d100      	bne.n	8002202 <HAL_RCC_OscConfig+0x2fe>
 8002200:	e0c6      	b.n	8002390 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2238      	movs	r2, #56	; 0x38
 8002210:	4013      	ands	r3, r2
 8002212:	2b20      	cmp	r3, #32
 8002214:	d11e      	bne.n	8002254 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_OscConfig+0x32c>)
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x31e>
 8002220:	e0b6      	b.n	8002390 <HAL_RCC_OscConfig+0x48c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d000      	beq.n	800222c <HAL_RCC_OscConfig+0x328>
 800222a:	e0b1      	b.n	8002390 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e177      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
 8002230:	40021000 	.word	0x40021000
 8002234:	fffeffff 	.word	0xfffeffff
 8002238:	fffbffff 	.word	0xfffbffff
 800223c:	ffff80ff 	.word	0xffff80ff
 8002240:	ffffc7ff 	.word	0xffffc7ff
 8002244:	00f42400 	.word	0x00f42400
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004
 8002250:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002254:	4bb4      	ldr	r3, [pc, #720]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	055b      	lsls	r3, r3, #21
 800225c:	4013      	ands	r3, r2
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x360>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x362>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d011      	beq.n	800228e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4baf      	ldr	r3, [pc, #700]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800226c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800226e:	4bae      	ldr	r3, [pc, #696]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0549      	lsls	r1, r1, #21
 8002274:	430a      	orrs	r2, r1
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
 8002278:	4bab      	ldr	r3, [pc, #684]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800227a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	055b      	lsls	r3, r3, #21
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002286:	231f      	movs	r3, #31
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	4ba7      	ldr	r3, [pc, #668]	; (800252c <HAL_RCC_OscConfig+0x628>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d11a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229a:	4ba4      	ldr	r3, [pc, #656]	; (800252c <HAL_RCC_OscConfig+0x628>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4ba3      	ldr	r3, [pc, #652]	; (800252c <HAL_RCC_OscConfig+0x628>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0049      	lsls	r1, r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fa7c 	bl	80017a4 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fa77 	bl	80017a4 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e12d      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c4:	4b99      	ldr	r3, [pc, #612]	; (800252c <HAL_RCC_OscConfig+0x628>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3e2>
 80022d8:	4b93      	ldr	r3, [pc, #588]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80022da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80022de:	2101      	movs	r1, #1
 80022e0:	430a      	orrs	r2, r1
 80022e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x41c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x404>
 80022ee:	4b8e      	ldr	r3, [pc, #568]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80022f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f2:	4b8d      	ldr	r3, [pc, #564]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80022f4:	2104      	movs	r1, #4
 80022f6:	430a      	orrs	r2, r1
 80022f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80022fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022fe:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	65da      	str	r2, [r3, #92]	; 0x5c
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x41c>
 8002308:	4b87      	ldr	r3, [pc, #540]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800230a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800230c:	4b86      	ldr	r3, [pc, #536]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800230e:	2101      	movs	r1, #1
 8002310:	438a      	bics	r2, r1
 8002312:	65da      	str	r2, [r3, #92]	; 0x5c
 8002314:	4b84      	ldr	r3, [pc, #528]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002316:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002318:	4b83      	ldr	r3, [pc, #524]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800231a:	2104      	movs	r1, #4
 800231c:	438a      	bics	r2, r1
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d014      	beq.n	8002352 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff fa3c 	bl	80017a4 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002330:	e009      	b.n	8002346 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff fa37 	bl	80017a4 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4a7c      	ldr	r2, [pc, #496]	; (8002530 <HAL_RCC_OscConfig+0x62c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0ec      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002346:	4b78      	ldr	r3, [pc, #480]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x42e>
 8002350:	e013      	b.n	800237a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7ff fa27 	bl	80017a4 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235a:	e009      	b.n	8002370 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7ff fa22 	bl	80017a4 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	4a72      	ldr	r2, [pc, #456]	; (8002530 <HAL_RCC_OscConfig+0x62c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0d7      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002370:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800237a:	231f      	movs	r3, #31
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002388:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800238a:	496a      	ldr	r1, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x630>)
 800238c:	400a      	ands	r2, r1
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d100      	bne.n	800239a <HAL_RCC_OscConfig+0x496>
 8002398:	e0c1      	b.n	800251e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2238      	movs	r2, #56	; 0x38
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d100      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4a4>
 80023a6:	e081      	b.n	80024ac <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d156      	bne.n	800245e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80023b6:	4960      	ldr	r1, [pc, #384]	; (8002538 <HAL_RCC_OscConfig+0x634>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f9f2 	bl	80017a4 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7ff f9ed 	bl	80017a4 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0a3      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	049b      	lsls	r3, r3, #18
 80023e0:	4013      	ands	r3, r2
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a54      	ldr	r2, [pc, #336]	; (800253c <HAL_RCC_OscConfig+0x638>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	431a      	orrs	r2, r3
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b42      	ldr	r3, [pc, #264]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0449      	lsls	r1, r1, #17
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	0549      	lsls	r1, r1, #21
 8002430:	430a      	orrs	r2, r1
 8002432:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff f9b6 	bl	80017a4 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff f9b1 	bl	80017a4 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e067      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	049b      	lsls	r3, r3, #18
 8002458:	4013      	ands	r3, r2
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x53a>
 800245c:	e05f      	b.n	800251e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b31      	ldr	r3, [pc, #196]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002464:	4934      	ldr	r1, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x634>)
 8002466:	400a      	ands	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002470:	2103      	movs	r1, #3
 8002472:	438a      	bics	r2, r1
 8002474:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002476:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 800247c:	4930      	ldr	r1, [pc, #192]	; (8002540 <HAL_RCC_OscConfig+0x63c>)
 800247e:	400a      	ands	r2, r1
 8002480:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7ff f98f 	bl	80017a4 <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff f98a 	bl	80017a4 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e040      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x588>
 80024aa:	e038      	b.n	800251e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e033      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x624>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2203      	movs	r2, #3
 80024c2:	401a      	ands	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d126      	bne.n	800251a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2270      	movs	r2, #112	; 0x70
 80024d0:	401a      	ands	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11f      	bne.n	800251a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	23fe      	movs	r3, #254	; 0xfe
 80024de:	01db      	lsls	r3, r3, #7
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d116      	bne.n	800251a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	23f8      	movs	r3, #248	; 0xf8
 80024f0:	039b      	lsls	r3, r3, #14
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10e      	bne.n	800251a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	23e0      	movs	r3, #224	; 0xe0
 8002500:	051b      	lsls	r3, r3, #20
 8002502:	401a      	ands	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	0f5b      	lsrs	r3, r3, #29
 8002510:	075a      	lsls	r2, r3, #29
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b008      	add	sp, #32
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	00001388 	.word	0x00001388
 8002534:	efffffff 	.word	0xefffffff
 8002538:	feffffff 	.word	0xfeffffff
 800253c:	11c1808c 	.word	0x11c1808c
 8002540:	eefeffff 	.word	0xeefeffff

08002544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0e9      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2207      	movs	r2, #7
 800255e:	4013      	ands	r3, r2
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d91e      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2207      	movs	r2, #7
 800256c:	4393      	bics	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	4b70      	ldr	r3, [pc, #448]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002578:	f7ff f914 	bl	80017a4 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002580:	e009      	b.n	8002596 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002582:	f7ff f90f 	bl	80017a4 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	4a6a      	ldr	r2, [pc, #424]	; (8002738 <HAL_RCC_ClockConfig+0x1f4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0ca      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2207      	movs	r2, #7
 800259c:	4013      	ands	r3, r2
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d015      	beq.n	80025da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2204      	movs	r2, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d006      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025b8:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	21e0      	movs	r1, #224	; 0xe0
 80025c0:	01c9      	lsls	r1, r1, #7
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <HAL_RCC_ClockConfig+0x1fc>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d057      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d12b      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e097      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d107      	bne.n	8002614 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	049b      	lsls	r3, r3, #18
 800260c:	4013      	ands	r3, r2
 800260e:	d11f      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e08b      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4013      	ands	r3, r2
 8002626:	d113      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e07f      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002634:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d108      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e074      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e06d      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2207      	movs	r2, #7
 8002656:	4393      	bics	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7ff f89e 	bl	80017a4 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266c:	e009      	b.n	8002682 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266e:	f7ff f899 	bl	80017a4 <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <HAL_RCC_ClockConfig+0x1f4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e054      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2238      	movs	r2, #56	; 0x38
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	429a      	cmp	r2, r3
 8002692:	d1ec      	bne.n	800266e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2207      	movs	r2, #7
 800269a:	4013      	ands	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d21e      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2207      	movs	r2, #7
 80026a8:	4393      	bics	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026b4:	f7ff f876 	bl	80017a4 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7ff f871 	bl	80017a4 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <HAL_RCC_ClockConfig+0x1f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e02c      	b.n	800272c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2207      	movs	r2, #7
 80026d8:	4013      	ands	r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2204      	movs	r2, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <HAL_RCC_ClockConfig+0x200>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026fe:	f000 f829 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002702:	0001      	movs	r1, r0
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCC_ClockConfig+0x1f8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	220f      	movs	r2, #15
 800270c:	401a      	ands	r2, r3
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x204>)
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	58d3      	ldr	r3, [r2, r3]
 8002714:	221f      	movs	r2, #31
 8002716:	4013      	ands	r3, r2
 8002718:	000a      	movs	r2, r1
 800271a:	40da      	lsrs	r2, r3
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x208>)
 800271e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x20c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0018      	movs	r0, r3
 8002726:	f7fe ffe3 	bl	80016f0 <HAL_InitTick>
 800272a:	0003      	movs	r3, r0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40022000 	.word	0x40022000
 8002738:	00001388 	.word	0x00001388
 800273c:	40021000 	.word	0x40021000
 8002740:	fffff0ff 	.word	0xfffff0ff
 8002744:	ffff8fff 	.word	0xffff8fff
 8002748:	08002988 	.word	0x08002988
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800275a:	4b3c      	ldr	r3, [pc, #240]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	; 0x38
 8002760:	4013      	ands	r3, r2
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002764:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0adb      	lsrs	r3, r3, #11
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	0013      	movs	r3, r2
 8002774:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	4835      	ldr	r0, [pc, #212]	; (8002850 <HAL_RCC_GetSysClockFreq+0xfc>)
 800277a:	f7fd fcc3 	bl	8000104 <__udivsi3>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e05d      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2238      	movs	r2, #56	; 0x38
 800278a:	4013      	ands	r3, r2
 800278c:	2b08      	cmp	r3, #8
 800278e:	d102      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCC_GetSysClockFreq+0x100>)
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e054      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2238      	movs	r2, #56	; 0x38
 800279c:	4013      	ands	r3, r2
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d138      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2203      	movs	r2, #3
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	2207      	movs	r2, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	3301      	adds	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	4824      	ldr	r0, [pc, #144]	; (8002854 <HAL_RCC_GetSysClockFreq+0x100>)
 80027c4:	f7fd fc9e 	bl	8000104 <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	0019      	movs	r1, r3
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	227f      	movs	r2, #127	; 0x7f
 80027d4:	4013      	ands	r3, r2
 80027d6:	434b      	muls	r3, r1
 80027d8:	617b      	str	r3, [r7, #20]
        break;
 80027da:	e00d      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	481c      	ldr	r0, [pc, #112]	; (8002850 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027e0:	f7fd fc90 	bl	8000104 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	0019      	movs	r1, r3
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	227f      	movs	r2, #127	; 0x7f
 80027f0:	4013      	ands	r3, r2
 80027f2:	434b      	muls	r3, r1
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0f5b      	lsrs	r3, r3, #29
 80027fe:	2207      	movs	r2, #7
 8002800:	4013      	ands	r3, r2
 8002802:	3301      	adds	r3, #1
 8002804:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f7fd fc7b 	bl	8000104 <__udivsi3>
 800280e:	0003      	movs	r3, r0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e015      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2238      	movs	r2, #56	; 0x38
 800281a:	4013      	ands	r3, r2
 800281c:	2b20      	cmp	r3, #32
 800281e:	d103      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2238      	movs	r2, #56	; 0x38
 800282e:	4013      	ands	r3, r2
 8002830:	2b18      	cmp	r3, #24
 8002832:	d103      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002834:	23fa      	movs	r3, #250	; 0xfa
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e001      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002840:	693b      	ldr	r3, [r7, #16]
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b006      	add	sp, #24
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	40021000 	.word	0x40021000
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4d0c      	ldr	r5, [pc, #48]	; (8002890 <__libc_init_array+0x38>)
 800285e:	4c0d      	ldr	r4, [pc, #52]	; (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	2600      	movs	r6, #0
 800286a:	f000 f821 	bl	80028b0 <_init>
 800286e:	4d0a      	ldr	r5, [pc, #40]	; (8002898 <__libc_init_array+0x40>)
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	00b3      	lsls	r3, r6, #2
 800287e:	58eb      	ldr	r3, [r5, r3]
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	00b3      	lsls	r3, r6, #2
 8002888:	58eb      	ldr	r3, [r5, r3]
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	080029c8 	.word	0x080029c8
 8002894:	080029c8 	.word	0x080029c8
 8002898:	080029c8 	.word	0x080029c8
 800289c:	080029cc 	.word	0x080029cc

080028a0 <memset>:
 80028a0:	0003      	movs	r3, r0
 80028a2:	1812      	adds	r2, r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	7019      	strb	r1, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
